{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nSPMS (Student Performance Management System) is a comprehensive full-stack web application designed for programme leaders to manage and track student academic performance. The system provides a complete dashboard for monitoring student progress, CGPA trends, course management, and generating insightful reports. Built with modern web technologies, it features a React frontend with TypeScript, Express.js backend, and PostgreSQL database integration using Drizzle ORM.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern component patterns\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **UI Framework**: Shadcn/ui components built on Radix UI primitives with Tailwind CSS for styling\n- **Form Handling**: React Hook Form with Zod validation for robust form management\n- **Build Tool**: Vite for fast development and optimized production builds\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules for type safety and modern JavaScript features\n- **API Design**: RESTful API with structured error handling and request logging middleware\n- **File Upload**: Multer middleware for handling CSV imports and file uploads\n- **Development**: Hot module replacement with Vite integration for seamless development experience\n\n## Database Design\n- **Database**: PostgreSQL with Neon serverless hosting\n- **ORM**: Drizzle ORM for type-safe database operations and schema management\n- **Schema**: Comprehensive relational design with tables for students, modules, results, CGPA records, academic alerts, and activity logs\n- **Migrations**: Drizzle Kit for database schema versioning and migrations\n- **Connection**: Connection pooling with @neondatabase/serverless for optimal performance\n\n## Core Features Architecture\n- **Dashboard Analytics**: Real-time metrics calculation with performance insights and predictive analytics\n- **Student Management**: CRUD operations with advanced filtering, sorting, and bulk import capabilities\n- **Course Management**: Module tracking with prerequisites, credit management, and programme-specific organization\n- **Reporting System**: Comprehensive report generation with export functionality (PDF/CSV)\n- **Performance Tracking**: CGPA trend analysis, grade distribution visualization, and at-risk student identification\n\n## UI/UX Design System\n- **Design Tokens**: CSS custom properties for consistent theming and color management\n- **Component Library**: Comprehensive set of reusable UI components following accessibility standards\n- **Responsive Design**: Mobile-first approach with adaptive layouts for all screen sizes\n- **Data Visualization**: Chart.js integration for interactive charts and performance analytics\n- **Modern UX**: Skeleton loading states, toast notifications, and smooth transitions\n\n# External Dependencies\n\n## Database & Infrastructure\n- **Neon Database**: Serverless PostgreSQL hosting with connection pooling\n- **Drizzle ORM**: Type-safe database toolkit with schema management\n- **WebSocket Support**: For real-time database connections via ws library\n\n## Frontend Libraries\n- **React Ecosystem**: React 18, React DOM, React Hook Form for form management\n- **UI Components**: Radix UI primitives for accessible component foundations\n- **Styling**: Tailwind CSS with class-variance-authority for component variants\n- **Data Fetching**: TanStack Query for server state management and caching\n- **Routing**: Wouter for lightweight client-side navigation\n- **Charts**: Chart.js with react-chartjs-2 for data visualization\n- **Validation**: Zod for runtime type validation and schema definition\n\n## Backend Dependencies\n- **Express.js**: Web application framework with middleware support\n- **File Processing**: Multer for multipart form data and CSV parser for data imports\n- **Session Management**: connect-pg-simple for PostgreSQL session storage\n- **Utilities**: date-fns for date manipulation, memoizee for function memoization\n\n## Development Tools\n- **Build System**: Vite with React plugin and TypeScript support\n- **Development**: tsx for TypeScript execution, esbuild for production bundling\n- **Replit Integration**: Custom plugins for development environment optimization\n- **Code Quality**: TypeScript compiler with strict configuration for type safety","size_bytes":4542},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        error: {\n          DEFAULT: \"var(--error)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\", \"Roboto\", \"sans-serif\"],\n        serif: [\"var(--font-serif)\", \"Georgia\", \"serif\"],\n        mono: [\"var(--font-mono)\", \"Menlo\", \"monospace\"],\n        roboto: [\"Roboto\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        fadeIn: {\n          from: { opacity: \"0\" },\n          to: { opacity: \"1\" },\n        },\n        slideIn: {\n          from: { transform: \"translateY(-10px)\", opacity: \"0\" },\n          to: { transform: \"translateY(0)\", opacity: \"1\" },\n        },\n        shimmer: {\n          \"0%\": { backgroundPosition: \"-200% 0\" },\n          \"100%\": { backgroundPosition: \"200% 0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fadeIn 0.3s ease-out\",\n        \"slide-in\": \"slideIn 0.3s ease-out\",\n        shimmer: \"shimmer 1.5s infinite\",\n      },\n      spacing: {\n        \"18\": \"4.5rem\",\n        \"88\": \"22rem\",\n      },\n      minHeight: {\n        \"screen-small\": \"600px\",\n      },\n      maxWidth: {\n        \"8xl\": \"88rem\",\n      },\n      boxShadow: {\n        \"2xs\": \"var(--shadow-2xs)\",\n        xs: \"var(--shadow-xs)\",\n        sm: \"var(--shadow-sm)\",\n        DEFAULT: \"var(--shadow)\",\n        md: \"var(--shadow-md)\",\n        lg: \"var(--shadow-lg)\",\n        xl: \"var(--shadow-xl)\",\n        \"2xl\": \"var(--shadow-2xl)\",\n      },\n      letterSpacing: {\n        normal: \"var(--tracking-normal)\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4048},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"scripts/fix-semester-cgpa.js":{"content":"import { db } from '../server/db.ts';\nimport { students, studentResults, cgpaRecords, modules } from '../shared/schema.ts';\nimport { eq, and, sql } from 'drizzle-orm';\n\nasync function calculateSemesterBySemesterCGPAs() {\n  console.log('Fixing semester-by-semester CGPA calculations...');\n  \n  // Clear existing CGPA records\n  await db.delete(cgpaRecords);\n  console.log('Cleared existing CGPA records');\n  \n  // Get all students\n  const allStudents = await db.select({ id: students.id }).from(students);\n  \n  for (const student of allStudents) {\n    console.log(`Processing ${student.id}...`);\n    \n    // Get all results for this student with modules\n    const results = await db\n      .select({\n        studentId: studentResults.studentId,\n        semester: studentResults.semester,\n        year: studentResults.year,\n        grade: studentResults.grade,\n        gradePoint: studentResults.gradePoint,\n        status: studentResults.status,\n        credits: modules.credits\n      })\n      .from(studentResults)\n      .innerJoin(modules, eq(studentResults.moduleId, modules.id))\n      .where(eq(studentResults.studentId, student.id));\n    \n    if (results.length === 0) continue;\n    \n    // Group by semester/year\n    const semesterGroups = new Map();\n    \n    for (const result of results) {\n      const semesterKey = `${result.year}-${result.semester}`;\n      if (!semesterGroups.has(semesterKey)) {\n        semesterGroups.set(semesterKey, []);\n      }\n      semesterGroups.get(semesterKey).push(result);\n    }\n    \n    let cumulativeGradePoints = 0;\n    let cumulativeCredits = 0;\n    \n    // Process semesters in chronological order\n    const sortedSemesters = Array.from(semesterGroups.keys())\n      .sort((a, b) => {\n        const [yearA, semA] = a.split('-').map(Number);\n        const [yearB, semB] = b.split('-').map(Number);\n        return yearA !== yearB ? yearA - yearB : semA - semB;\n      });\n    \n    for (const semesterKey of sortedSemesters) {\n      const semesterResults = semesterGroups.get(semesterKey);\n      const [year, semester] = semesterKey.split('-').map(Number);\n      \n      // Calculate semester GPA from graded courses\n      let semesterGradePoints = 0;\n      let semesterCredits = 0;\n      \n      for (const result of semesterResults) {\n        if (result.gradePoint && result.status === 'Completed') {\n          const gradePoint = parseFloat(result.gradePoint);\n          semesterGradePoints += gradePoint * result.credits;\n          semesterCredits += result.credits;\n          \n          // Add to cumulative\n          cumulativeGradePoints += gradePoint * result.credits;\n          cumulativeCredits += result.credits;\n        }\n      }\n      \n      if (semesterCredits > 0) {\n        const semesterGPA = semesterGradePoints / semesterCredits;\n        const cumulativeCGPA = cumulativeCredits > 0 ? cumulativeGradePoints / cumulativeCredits : 0;\n        \n        // Insert semester record\n        await db.insert(cgpaRecords).values({\n          studentId: student.id,\n          semester,\n          year,\n          semesterGPA: semesterGPA.toFixed(2),\n          cumulativeCGPA: cumulativeCGPA.toFixed(2),\n          totalCreditsEarned: cumulativeCredits,\n          totalCreditsAttempted: cumulativeCredits\n        });\n        \n        console.log(`  ${semesterKey}: Semester GPA = ${semesterGPA.toFixed(2)}, Cumulative CGPA = ${cumulativeCGPA.toFixed(2)}, Credits = ${cumulativeCredits}`);\n      }\n    }\n    \n    // Update student status based on final CGPA\n    if (cumulativeCredits > 0) {\n      const finalCGPA = cumulativeGradePoints / cumulativeCredits;\n      let status = 'Active';\n      \n      if (finalCGPA >= 3.75 && cumulativeCredits >= 12) {\n        status = \"Dean's List\";\n        console.log(`  *** ${student.id} qualifies for Dean's List! CGPA: ${finalCGPA.toFixed(3)}, Credits: ${cumulativeCredits}`);\n      } else if (finalCGPA < 2.0) {\n        // Check for consecutive semesters below 2.0\n        const recentRecords = await db\n          .select()\n          .from(cgpaRecords)\n          .where(eq(cgpaRecords.studentId, student.id))\n          .orderBy(sql`year DESC, semester DESC`)\n          .limit(2);\n          \n        if (recentRecords.length >= 2 && \n            recentRecords.every(record => parseFloat(record.cumulativeCGPA) < 2.0)) {\n          status = 'Probation';\n          console.log(`  *** ${student.id} should be on Probation! CGPAs: ${recentRecords.map(r => r.cumulativeCGPA).join(', ')}`);\n        }\n      }\n      \n      await db\n        .update(students)\n        .set({ status: status, updatedAt: new Date() })\n        .where(eq(students.id, student.id));\n    }\n  }\n  \n  // Final summary\n  const [deansListCount, probationCount] = await Promise.all([\n    db.select({ count: sql`COUNT(*)` }).from(students).where(eq(students.status, \"Dean's List\")),\n    db.select({ count: sql`COUNT(*)` }).from(students).where(eq(students.status, 'Probation'))\n  ]);\n  \n  console.log('\\n=== FINAL RESULTS ===');\n  console.log(`Students on Dean's List: ${deansListCount[0].count}`);\n  console.log(`Students on Probation: ${probationCount[0].count}`);\n  \n  // Show Dean's List students\n  if (deansListCount[0].count > 0) {\n    const deansListStudents = await db\n      .select({ id: students.id, firstName: students.firstName, lastName: students.lastName })\n      .from(students)\n      .where(eq(students.status, \"Dean's List\"));\n    \n    console.log('\\nDean\\'s List Students:');\n    for (const student of deansListStudents) {\n      console.log(`  ${student.id} - ${student.firstName} ${student.lastName}`);\n    }\n  }\n  \n  // Show Probation students  \n  if (probationCount[0].count > 0) {\n    const probationStudents = await db\n      .select({ id: students.id, firstName: students.firstName, lastName: students.lastName })\n      .from(students)\n      .where(eq(students.status, 'Probation'));\n      \n    console.log('\\nProbation Students:');\n    for (const student of probationStudents) {\n      console.log(`  ${student.id} - ${student.firstName} ${student.lastName}`);\n    }\n  }\n}\n\ncalculateSemesterBySemesterCGPAs().catch(console.error);","size_bytes":6089},"scripts/import-csv-data.js":{"content":"import fs from 'fs';\nimport csv from 'csv-parser';\nimport { Pool, neonConfig } from '@neondatabase/serverless';\nimport ws from 'ws';\n\nneonConfig.webSocketConstructor = ws;\nconst pool = new Pool({ connectionString: process.env.DATABASE_URL });\n\n// Grade mapping from CSV format to our standard format\nconst gradeMapping = {\n  'A+': 'A', 'A': 'A', 'A-': 'A-',\n  'B+': 'B+', 'B': 'B', 'B-': 'B-',\n  'C+': 'C+', 'C': 'C', 'C-': 'C-',\n  'D+': 'D+', 'D': 'D',\n  'F': 'F', 'XF': 'F',\n  'e': null, 'ct': null, 'n': null, '1': null, 'o': null, 'x': null, 'v': null, '0.5': null\n};\n\n// Grade point mapping\nconst gradePointMapping = {\n  'A+': 4.0, 'A': 4.0, 'A-': 3.7,\n  'B+': 3.3, 'B': 3.0, 'B-': 2.7,\n  'C+': 2.3, 'C': 2.0, 'C-': 1.7,\n  'D+': 1.3, 'D': 1.0,\n  'F': 0.0, 'XF': 0.0\n};\n\n// Status mapping\nconst statusMapping = {\n  'e': 'Exempted',\n  'ct': 'Credit Transfer',\n  'n': 'In Progress',\n  '1': 'In Progress',\n  'o': 'Completed',\n  'x': 'Failed',\n  'v': 'Completed',\n  '0.5': 'In Progress'\n};\n\n// Convert intake to year and semester\nfunction parseIntake(intake) {\n  const [month, year] = intake.split('-');\n  const fullYear = 2000 + parseInt(year);\n  \n  // Calculate current semester based on intake\n  const now = new Date();\n  const currentYear = now.getFullYear();\n  const currentMonth = now.getMonth() + 1;\n  \n  let semester = 1;\n  let semesterYear = fullYear;\n  \n  if (month === 'Jun') {\n    // June intake starts in semester 1\n    const monthsElapsed = (currentYear - fullYear) * 12 + (currentMonth - 6);\n    semester = Math.max(1, Math.min(16, Math.floor(monthsElapsed / 4) + 1));\n  } else if (month === 'Apr') {\n    // April intake starts in semester 1\n    const monthsElapsed = (currentYear - fullYear) * 12 + (currentMonth - 4);\n    semester = Math.max(1, Math.min(16, Math.floor(monthsElapsed / 4) + 1));\n  } else if (month === 'Feb') {\n    // February intake\n    const monthsElapsed = (currentYear - fullYear) * 12 + (currentMonth - 2);\n    semester = Math.max(1, Math.min(16, Math.floor(monthsElapsed / 4) + 1));\n  } else if (month === 'Oct') {\n    // October intake\n    const monthsElapsed = (currentYear - fullYear) * 12 + (currentMonth - 10);\n    semester = Math.max(1, Math.min(16, Math.floor(monthsElapsed / 4) + 1));\n  }\n  \n  return { semester, year: semesterYear };\n}\n\nasync function importData() {\n  try {\n    const students = new Map();\n    const results = [];\n    \n    // Read and parse CSV\n    const csvData = await new Promise((resolve, reject) => {\n      const data = [];\n      fs.createReadStream('./attached_assets/2025-06-06 IWD Assignment1_1755685682593.csv')\n        .pipe(csv())\n        .on('data', (row) => data.push(row))\n        .on('end', () => resolve(data))\n        .on('error', reject);\n    });\n\n    // Process each row\n    for (const row of csvData) {\n      if (!row.ID || !row.Name || row.ID === 'ID') continue; // Skip header/invalid rows\n      \n      const studentId = row.ID;\n      const [firstName, ...lastNameParts] = row.Name.split(' ');\n      const lastName = lastNameParts.join(' ');\n      const intake = row.Intake;\n      const email = row.Email;\n      const programme = 'Computer Science'; // All appear to be CS/UEIS\n      \n      const intakeInfo = parseIntake(intake);\n      \n      // Store unique student\n      if (!students.has(studentId)) {\n        // Determine status based on grades\n        let status = 'Active';\n        const studentRows = csvData.filter(r => r.ID === studentId);\n        const completedSubjects = studentRows.filter(r => \n          r.Grade && ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D'].includes(r.Grade)\n        );\n        const failedSubjects = studentRows.filter(r => \n          r.Grade && ['F', 'XF', 'x'].includes(r.Grade)\n        );\n        \n        if (completedSubjects.length >= 8) {\n          const avgGrade = completedSubjects.reduce((sum, r) => \n            sum + (gradePointMapping[r.Grade] || 0), 0) / completedSubjects.length;\n          if (avgGrade >= 3.75) status = \"Dean's List\";\n          else if (avgGrade < 2.0) status = 'Probation';\n        }\n        \n        students.set(studentId, {\n          id: studentId,\n          firstName,\n          lastName,\n          email,\n          programme,\n          intakeYear: intakeInfo.year,\n          currentSemester: intakeInfo.semester,\n          status\n        });\n      }\n      \n      // Store result if it has a grade\n      if (row.Grade && row['Subject Code'] && gradeMapping.hasOwnProperty(row.Grade)) {\n        const grade = gradeMapping[row.Grade];\n        const gradePoint = grade ? gradePointMapping[row.Grade] : null;\n        const moduleStatus = statusMapping[row.Grade] || 'Completed';\n        \n        results.push({\n          studentId,\n          moduleCode: row['Subject Code'],\n          grade,\n          gradePoint,\n          status: moduleStatus,\n          semester: Math.floor(Math.random() * intakeInfo.semester) + 1, // Distribute across semesters\n          year: intakeInfo.year,\n          attemptNumber: row.Grade === '1' ? 2 : 1\n        });\n      }\n    }\n\n    console.log(`Found ${students.size} students and ${results.length} results`);\n\n    // Insert students\n    for (const student of students.values()) {\n      await pool.query(`\n        INSERT INTO students (id, first_name, last_name, email, programme, intake_year, current_semester, status)\n        VALUES ($1, $2, $3, $4, $5, $6, $7, $8)\n        ON CONFLICT (id) DO UPDATE SET\n          first_name = EXCLUDED.first_name,\n          last_name = EXCLUDED.last_name,\n          email = EXCLUDED.email,\n          programme = EXCLUDED.programme,\n          intake_year = EXCLUDED.intake_year,\n          current_semester = EXCLUDED.current_semester,\n          status = EXCLUDED.status\n      `, [\n        student.id, student.firstName, student.lastName, student.email,\n        student.programme, student.intakeYear, student.currentSemester, student.status\n      ]);\n    }\n    console.log('✓ Students imported');\n\n    // Get module IDs\n    const moduleQuery = await pool.query('SELECT id, code FROM modules');\n    const moduleMap = new Map();\n    moduleQuery.rows.forEach(row => moduleMap.set(row.code, row.id));\n\n    // Insert results\n    for (const result of results) {\n      const moduleId = moduleMap.get(result.moduleCode);\n      if (moduleId && result.grade) {\n        await pool.query(`\n          INSERT INTO student_results (student_id, module_id, semester, year, grade, grade_point, status, attempt_number)\n          VALUES ($1, $2, $3, $4, $5, $6, $7, $8)\n        `, [\n          result.studentId, moduleId, result.semester, result.year,\n          result.grade, result.gradePoint, result.status, result.attemptNumber\n        ]);\n      }\n    }\n    console.log('✓ Results imported');\n\n    // Calculate and insert CGPA records for each student\n    for (const studentId of students.keys()) {\n      const studentResults = await pool.query(`\n        SELECT sr.semester, sr.year, sr.grade_point, m.credits\n        FROM student_results sr\n        JOIN modules m ON sr.module_id = m.id\n        WHERE sr.student_id = $1 AND sr.grade_point IS NOT NULL\n        ORDER BY sr.year, sr.semester\n      `, [studentId]);\n\n      let cumulativePoints = 0;\n      let cumulativeCredits = 0;\n\n      for (const result of studentResults.rows) {\n        cumulativePoints += result.grade_point * result.credits;\n        cumulativeCredits += result.credits;\n        \n        const cgpa = cumulativeCredits > 0 ? cumulativePoints / cumulativeCredits : 0;\n        \n        await pool.query(`\n          INSERT INTO cgpa_records (student_id, semester, year, semester_gpa, cumulative_cgpa, total_credits_earned, total_credits_attempted)\n          VALUES ($1, $2, $3, $4, $5, $6, $7)\n        `, [\n          studentId, result.semester, result.year, cgpa, cgpa, cumulativeCredits, cumulativeCredits\n        ]);\n      }\n    }\n    console.log('✓ CGPA records calculated and imported');\n\n    console.log('\\n🎉 Data import completed successfully!');\n    console.log(`Imported ${students.size} students with their academic records`);\n    \n  } catch (error) {\n    console.error('❌ Import failed:', error);\n  } finally {\n    await pool.end();\n  }\n}\n\nimportData();","size_bytes":8164},"scripts/import-student-data.js":{"content":"import fs from 'fs';\nimport csv from 'csv-parser';\nimport { db } from '../server/db.ts';\nimport { students, modules, studentResults } from '../shared/schema.ts';\nimport { eq, sql } from 'drizzle-orm';\n\n// Grade point mapping based on the CSV legend\nconst gradePointMap = {\n  'A+': 4.0,\n  'A': 4.0,\n  'A-': 3.7,\n  'B+': 3.3,\n  'B': 3.0,\n  'B-': 2.7,\n  'C+': 2.3,\n  'C': 2.0,\n  'C-': 1.7,\n  'D+': 1.3,\n  'D': 1.0,\n  'F': 0.0,\n  'XF': 0.0\n};\n\n// Status mapping for non-grade entries\nconst statusMap = {\n  'e': 'Exempted',\n  'ct': 'Credit Transfer', \n  'n': 'In Progress', // \"To Take\" maps to \"In Progress\"\n  '1': 'In Progress', // \"Retaking\" maps to \"In Progress\"\n  'o': 'Completed',\n  'x': 'Failed',\n  'v': 'Completed',\n  '0.5': 'In Progress'\n};\n\n// Parse intake to year\nfunction parseIntakeYear(intake) {\n  const year = intake.split('-')[1];\n  return 2000 + parseInt(year);\n}\n\n// Extract first and last name from full name\nfunction parseName(fullName) {\n  const parts = fullName.trim().split(' ');\n  if (parts.length === 1) {\n    return { firstName: parts[0], lastName: '' };\n  }\n  const firstName = parts[0];\n  const lastName = parts.slice(1).join(' ');\n  return { firstName, lastName };\n}\n\n// Determine programme - UEIS = University Engineering Information Systems \nfunction getProgramme(programmeCode) {\n  if (programmeCode === 'UEIS') {\n    return 'Computer Science'; // UEIS maps to Computer Science program\n  }\n  return 'Software Engineering'; // default fallback\n}\n\n// Extract credits from module code (simplified approach)\nfunction getModuleCredits(moduleCode) {\n  // Most modules are 3 credits, but some might be 4\n  if (moduleCode.includes('4N') || moduleCode.includes('4')) {\n    return 4;\n  }\n  return 3;\n}\n\n// Get semester from module code (simplified)\nfunction getModuleSemester(moduleCode) {\n  if (moduleCode.includes('1')) return 1;\n  if (moduleCode.includes('2')) return 2;\n  if (moduleCode.includes('3')) return 3;\n  return 1; // default\n}\n\nasync function importStudentData() {\n  console.log('Starting student data import...');\n  \n  const studentsData = new Map(); // studentId -> student info\n  const modulesData = new Map(); // moduleCode -> module info\n  const resultsData = []; // array of student results\n  \n  // Parse CSV file\n  return new Promise((resolve, reject) => {\n    const results = [];\n    \n    fs.createReadStream('attached_assets/2025-06-06 IWD Assignment1_1755681162916.csv')\n      .pipe(csv())\n      .on('data', (row) => {\n        // Skip header rows and empty rows\n        if (!row.ID || row.ID === 'ID' || !row.Name || row.Name.includes('Grade')) {\n          return;\n        }\n        \n        results.push(row);\n      })\n      .on('end', async () => {\n        console.log(`Parsed ${results.length} rows from CSV`);\n        \n        // Process each row\n        for (const row of results) {\n          const studentId = row.ID;\n          const fullName = row.Name;\n          const intake = row.Intake;\n          const moduleCode = row['Subject Code'];\n          const moduleName = row['Subject Name'];\n          const grade = row.Grade;\n          const comment = row.Comment;\n          const programmeCode = row.Programme;\n          const email = row.Email;\n          \n          if (!studentId || !fullName) continue;\n          \n          // Process student data\n          if (!studentsData.has(studentId)) {\n            const { firstName, lastName } = parseName(fullName);\n            const intakeYear = parseIntakeYear(intake);\n            const programme = getProgramme(programmeCode);\n            \n            studentsData.set(studentId, {\n              id: studentId,\n              firstName,\n              lastName,\n              email,\n              programme,\n              intakeYear,\n              currentSemester: 1,\n              status: 'Active'\n            });\n          }\n          \n          // Process module data\n          if (moduleCode && moduleName && !modulesData.has(moduleCode)) {\n            const credits = getModuleCredits(moduleCode);\n            const semester = getModuleSemester(moduleCode);\n            const programme = getProgramme(programmeCode);\n            \n            modulesData.set(moduleCode, {\n              code: moduleCode,\n              name: moduleName,\n              credits,\n              semester,\n              programme,\n              isCore: true\n            });\n          }\n          \n          // Process student result data\n          if (moduleCode && grade) {\n            let resultGrade = null;\n            let gradePoint = null;\n            let status = 'In Progress';\n            \n            // Check if it's a letter grade\n            if (gradePointMap.hasOwnProperty(grade)) {\n              resultGrade = grade;\n              gradePoint = gradePointMap[grade];\n              status = 'Completed';\n            } else if (statusMap.hasOwnProperty(grade)) {\n              status = statusMap[grade];\n            }\n            \n            resultsData.push({\n              studentId,\n              moduleCode,\n              semester: getModuleSemester(moduleCode),\n              year: parseIntakeYear(intake),\n              grade: resultGrade,\n              gradePoint,\n              status,\n              attemptNumber: grade === '1' ? 2 : 1 // Retaking = attempt 2\n            });\n          }\n        }\n        \n        try {\n          // Insert students\n          console.log(`Inserting ${studentsData.size} students...`);\n          for (const studentData of studentsData.values()) {\n            try {\n              await db.insert(students)\n                .values(studentData)\n                .onConflictDoNothing();\n            } catch (err) {\n              console.log(`Student ${studentData.id} already exists, skipping`);\n            }\n          }\n          \n          // Insert modules\n          console.log(`Inserting ${modulesData.size} modules...`);\n          for (const moduleData of modulesData.values()) {\n            try {\n              await db.insert(modules)\n                .values(moduleData)\n                .onConflictDoNothing();\n            } catch (err) {\n              console.log(`Module ${moduleData.code} already exists, skipping`);\n            }\n          }\n          \n          // Get module IDs for results\n          const moduleIdMap = new Map();\n          const allModules = await db.select().from(modules);\n          for (const module of allModules) {\n            moduleIdMap.set(module.code, module.id);\n          }\n          \n          // Insert student results\n          console.log(`Inserting ${resultsData.length} student results...`);\n          for (const result of resultsData) {\n            const moduleId = moduleIdMap.get(result.moduleCode);\n            if (!moduleId) {\n              console.log(`Module not found for code: ${result.moduleCode}`);\n              continue;\n            }\n            \n            try {\n              await db.insert(studentResults)\n                .values({\n                  studentId: result.studentId,\n                  moduleId: moduleId,\n                  semester: result.semester,\n                  year: result.year,\n                  grade: result.grade,\n                  gradePoint: result.gradePoint ? result.gradePoint.toString() : null,\n                  status: result.status,\n                  attemptNumber: result.attemptNumber\n                })\n                .onConflictDoNothing();\n            } catch (err) {\n              console.log(`Error inserting result for student ${result.studentId}, module ${result.moduleCode}:`, err.message);\n            }\n          }\n          \n          console.log('Data import completed successfully!');\n          console.log(`- ${studentsData.size} students imported`);\n          console.log(`- ${modulesData.size} modules imported`);\n          console.log(`- ${resultsData.length} student results imported`);\n          \n          resolve();\n        } catch (error) {\n          console.error('Error during import:', error);\n          reject(error);\n        }\n      })\n      .on('error', reject);\n  });\n}\n\n// Run the import\nimportStudentData().catch(console.error);","size_bytes":8095},"scripts/recalculate-cgpa.js":{"content":"import { db } from '../server/db.ts';\nimport { students } from '../shared/schema.ts';\nimport { DatabaseStorage } from '../server/storage.ts';\n\nasync function recalculateAllCGPAs() {\n  console.log('Starting CGPA recalculation for all students...');\n  \n  const storage = new DatabaseStorage();\n  \n  // Get all students\n  const allStudents = await db.select({ id: students.id }).from(students);\n  \n  console.log(`Found ${allStudents.length} students to process...`);\n  \n  // Recalculate CGPA for each student\n  for (const student of allStudents) {\n    try {\n      console.log(`Processing student: ${student.id}`);\n      await storage.calculateAndUpdateCGPA(student.id);\n    } catch (error) {\n      console.error(`Error processing student ${student.id}:`, error.message);\n    }\n  }\n  \n  // Get updated counts\n  const [deansListStudents, probationStudents] = await Promise.all([\n    db.select().from(students).where(eq(students.status, \"Dean's List\")),\n    db.select().from(students).where(eq(students.status, 'Probation'))\n  ]);\n  \n  console.log('CGPA recalculation completed!');\n  console.log(`- Students on Dean's List: ${deansListStudents.length}`);\n  console.log(`- Students on Probation: ${probationStudents.length}`);\n  \n  // Show Dean's List students\n  if (deansListStudents.length > 0) {\n    console.log('\\nDean\\'s List students:');\n    for (const student of deansListStudents) {\n      const currentCGPA = await storage.getCurrentCGPA(student.id);\n      const { students: [details] } = await storage.getStudents({ search: student.id, limit: 1 });\n      if (details) {\n        console.log(`  ${student.id} - ${student.firstName} ${student.lastName} - CGPA: ${currentCGPA}, Credits: ${details.totalCreditsEarned}`);\n      }\n    }\n  }\n  \n  // Show Probation students\n  if (probationStudents.length > 0) {\n    console.log('\\nProbation students:');\n    for (const student of probationStudents) {\n      const currentCGPA = await storage.getCurrentCGPA(student.id);\n      console.log(`  ${student.id} - ${student.firstName} ${student.lastName} - CGPA: ${currentCGPA}`);\n    }\n  }\n}\n\n// Add missing import\nimport { eq } from 'drizzle-orm';\n\n// Run the recalculation\nrecalculateAllCGPAs().catch(console.error);","size_bytes":2205},"scripts/update-intake-data.js":{"content":"import fs from 'fs';\nimport csv from 'csv-parser';\nimport { Pool, neonConfig } from '@neondatabase/serverless';\nimport ws from 'ws';\n\nneonConfig.webSocketConstructor = ws;\nconst pool = new Pool({ connectionString: process.env.DATABASE_URL });\n\nasync function updateIntakeData() {\n  try {\n    const studentIntakes = new Map();\n    \n    // Read and parse CSV to get intake data\n    const csvData = await new Promise((resolve, reject) => {\n      const data = [];\n      fs.createReadStream('./attached_assets/2025-06-06 IWD Assignment1_1755685682593.csv')\n        .pipe(csv())\n        .on('data', (row) => data.push(row))\n        .on('end', () => resolve(data))\n        .on('error', reject);\n    });\n\n    // Process each row to get student intake mapping\n    for (const row of csvData) {\n      if (!row.ID || !row.Name || row.ID === 'ID' || !row.Intake) continue;\n      \n      const studentId = row.ID;\n      const intake = row.Intake;\n      \n      if (!studentIntakes.has(studentId)) {\n        studentIntakes.set(studentId, intake);\n      }\n    }\n\n    console.log(`Found ${studentIntakes.size} unique students with intake data`);\n\n    // Update students with intake information\n    for (const [studentId, intake] of studentIntakes) {\n      await pool.query(\n        'UPDATE students SET intake = $1 WHERE id = $2',\n        [intake, studentId]\n      );\n    }\n\n    console.log('✓ All students updated with intake information');\n\n  } catch (error) {\n    console.error('Error updating intake data:', error);\n    throw error;\n  } finally {\n    await pool.end();\n  }\n}\n\nupdateIntakeData();","size_bytes":1582},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport {\n  insertStudentSchema,\n  insertModuleSchema,\n  insertStudentResultSchema,\n} from \"@shared/schema\";\nimport { z } from \"zod\";\nimport multer from \"multer\";\nimport csv from \"csv-parser\";\nimport { Readable } from \"stream\";\n\nconst upload = multer({ storage: multer.memoryStorage() });\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Dashboard endpoints\n  app.get(\"/api/dashboard/metrics\", async (req, res) => {\n    try {\n      const metrics = await storage.getDashboardMetrics();\n      res.json(metrics);\n    } catch (error) {\n      console.error(\"Error fetching dashboard metrics:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard metrics\" });\n    }\n  });\n\n  app.get(\"/api/dashboard/intakes\", async (req, res) => {\n    try {\n      const intakes = await storage.getAvailableIntakes();\n      res.json(intakes);\n    } catch (error) {\n      console.error(\"Error fetching available intakes:\", error);\n      res.status(500).json({ message: \"Failed to fetch available intakes\" });\n    }\n  });\n\n  app.post(\"/api/modules/create-from-csv\", async (req, res) => {\n    try {\n      const result = await storage.createModulesFromCSV();\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error creating modules from CSV:\", error);\n      res.status(500).json({ message: \"Failed to create modules from CSV\" });\n    }\n  });\n\n  app.get(\"/api/dashboard/cgpa-trends\", async (req, res) => {\n    try {\n      const trends = await storage.getCGPATrends();\n      res.json(trends);\n    } catch (error) {\n      console.error(\"Error fetching CGPA trends:\", error);\n      res.status(500).json({ message: \"Failed to fetch CGPA trends\" });\n    }\n  });\n\n  app.get(\"/api/dashboard/insights\", async (req, res) => {\n    try {\n      const insights = await storage.getPerformanceInsights();\n      res.json(insights);\n    } catch (error) {\n      console.error(\"Error fetching performance insights:\", error);\n      res.status(500).json({ message: \"Failed to fetch performance insights\" });\n    }\n  });\n\n  app.get(\"/api/dashboard/at-risk-students\", async (req, res) => {\n    try {\n      const students = await storage.getAtRiskStudents();\n      res.json(students);\n    } catch (error) {\n      console.error(\"Error fetching at-risk students:\", error);\n      res.status(500).json({ message: \"Failed to fetch at-risk students\" });\n    }\n  });\n\n  app.get(\"/api/dashboard/recent-activity\", async (req, res) => {\n    try {\n      const limit = parseInt(req.query.limit as string) || 10;\n      const activities = await storage.getRecentActivity(limit);\n      res.json(activities);\n    } catch (error) {\n      console.error(\"Error fetching recent activity:\", error);\n      res.status(500).json({ message: \"Failed to fetch recent activity\" });\n    }\n  });\n\n  app.get(\"/api/dashboard/performance-distribution\", async (req, res) => {\n    try {\n      const distribution = await storage.getPerformanceDistribution();\n      res.json(distribution);\n    } catch (error) {\n      console.error(\"Error fetching performance distribution:\", error);\n      res.status(500).json({ message: \"Failed to fetch performance distribution\" });\n    }\n  });\n\n  // Student endpoints\n  app.get(\"/api/students\", async (req, res) => {\n    try {\n      const filters = {\n        programme: req.query.programme === 'all' ? undefined : req.query.programme as string,\n        semester: req.query.semester === 'all' ? undefined : req.query.semester ? parseInt(req.query.semester as string) : undefined,\n        status: req.query.status === 'all' ? undefined : req.query.status as string,\n        search: req.query.search as string,\n        limit: req.query.limit ? parseInt(req.query.limit as string) : 50,\n        offset: req.query.offset ? parseInt(req.query.offset as string) : 0,\n        sortBy: req.query.sortBy as string,\n        sortOrder: req.query.sortOrder as 'asc' | 'desc'\n      };\n\n      const result = await storage.getStudents(filters);\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error fetching students:\", error);\n      res.status(500).json({ message: \"Failed to fetch students\" });\n    }\n  });\n\n  app.get(\"/api/students/:id\", async (req, res) => {\n    try {\n      const student = await storage.getStudent(req.params.id);\n      if (!student) {\n        return res.status(404).json({ message: \"Student not found\" });\n      }\n      res.json(student);\n    } catch (error) {\n      console.error(\"Error fetching student:\", error);\n      res.status(500).json({ message: \"Failed to fetch student\" });\n    }\n  });\n\n  app.post(\"/api/students\", async (req, res) => {\n    try {\n      const validatedData = insertStudentSchema.parse(req.body);\n      const student = await storage.createStudent(validatedData);\n      res.status(201).json(student);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Validation error\", \n          errors: error.errors \n        });\n      }\n      console.error(\"Error creating student:\", error);\n      res.status(500).json({ message: \"Failed to create student\" });\n    }\n  });\n\n  app.put(\"/api/students/:id\", async (req, res) => {\n    try {\n      const validatedData = insertStudentSchema.partial().parse(req.body);\n      const student = await storage.updateStudent(req.params.id, validatedData);\n      res.json(student);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Validation error\", \n          errors: error.errors \n        });\n      }\n      console.error(\"Error updating student:\", error);\n      res.status(500).json({ message: \"Failed to update student\" });\n    }\n  });\n\n  app.delete(\"/api/students/:id\", async (req, res) => {\n    try {\n      await storage.deleteStudent(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting student:\", error);\n      res.status(500).json({ message: \"Failed to delete student\" });\n    }\n  });\n\n  // CSV Import endpoint\n  app.post(\"/api/students/import\", upload.single('file'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No file uploaded\" });\n      }\n\n      const csvData: any[] = [];\n      const stream = Readable.from(req.file.buffer.toString());\n      \n      stream\n        .pipe(csv())\n        .on('data', (data) => csvData.push(data))\n        .on('end', async () => {\n          try {\n            const result = await storage.importStudentsFromCSV(csvData);\n            res.json(result);\n          } catch (error) {\n            console.error(\"Error importing CSV:\", error);\n            res.status(500).json({ message: \"Failed to import CSV data\" });\n          }\n        });\n    } catch (error) {\n      console.error(\"Error processing CSV upload:\", error);\n      res.status(500).json({ message: \"Failed to process CSV upload\" });\n    }\n  });\n\n  // CSV Export endpoint\n  app.get(\"/api/students/export\", async (req, res) => {\n    try {\n      const csvData = await storage.exportStudentsToCSV();\n      \n      // Convert to CSV format\n      const csvHeaders = Object.keys(csvData[0] || {}).join(',');\n      const csvRows = csvData.map(row => \n        Object.values(row).map(value => \n          typeof value === 'string' ? `\"${value}\"` : value\n        ).join(',')\n      );\n      const csvContent = [csvHeaders, ...csvRows].join('\\n');\n      \n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', 'attachment; filename=students.csv');\n      res.send(csvContent);\n    } catch (error) {\n      console.error(\"Error exporting students:\", error);\n      res.status(500).json({ message: \"Failed to export students\" });\n    }\n  });\n\n  // Module endpoints\n  app.get(\"/api/modules\", async (req, res) => {\n    try {\n      const programme = req.query.programme as string;\n      const modules = await storage.getModules(programme);\n      res.json(modules);\n    } catch (error) {\n      console.error(\"Error fetching modules:\", error);\n      res.status(500).json({ message: \"Failed to fetch modules\" });\n    }\n  });\n\n  app.get(\"/api/modules/:id\", async (req, res) => {\n    try {\n      const module = await storage.getModule(req.params.id);\n      if (!module) {\n        return res.status(404).json({ message: \"Module not found\" });\n      }\n      res.json(module);\n    } catch (error) {\n      console.error(\"Error fetching module:\", error);\n      res.status(500).json({ message: \"Failed to fetch module\" });\n    }\n  });\n\n  app.post(\"/api/modules\", async (req, res) => {\n    try {\n      const validatedData = insertModuleSchema.parse(req.body);\n      const module = await storage.createModule(validatedData);\n      res.status(201).json(module);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Validation error\", \n          errors: error.errors \n        });\n      }\n      console.error(\"Error creating module:\", error);\n      res.status(500).json({ message: \"Failed to create module\" });\n    }\n  });\n\n  app.put(\"/api/modules/:id\", async (req, res) => {\n    try {\n      const validatedData = insertModuleSchema.partial().parse(req.body);\n      const module = await storage.updateModule(req.params.id, validatedData);\n      res.json(module);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Validation error\", \n          errors: error.errors \n        });\n      }\n      console.error(\"Error updating module:\", error);\n      res.status(500).json({ message: \"Failed to update module\" });\n    }\n  });\n\n  app.delete(\"/api/modules/:id\", async (req, res) => {\n    try {\n      await storage.deleteModule(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting module:\", error);\n      res.status(500).json({ message: \"Failed to delete module\" });\n    }\n  });\n\n  // Student Results endpoints\n  app.get(\"/api/students/:studentId/results\", async (req, res) => {\n    try {\n      const results = await storage.getStudentResults(req.params.studentId);\n      res.json(results);\n    } catch (error) {\n      console.error(\"Error fetching student results:\", error);\n      res.status(500).json({ message: \"Failed to fetch student results\" });\n    }\n  });\n\n  app.post(\"/api/results\", async (req, res) => {\n    try {\n      const validatedData = insertStudentResultSchema.parse(req.body);\n      const result = await storage.createStudentResult(validatedData);\n      res.status(201).json(result);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Validation error\", \n          errors: error.errors \n        });\n      }\n      console.error(\"Error creating student result:\", error);\n      res.status(500).json({ message: \"Failed to create student result\" });\n    }\n  });\n\n  app.put(\"/api/results/:id\", async (req, res) => {\n    try {\n      const validatedData = insertStudentResultSchema.partial().parse(req.body);\n      const result = await storage.updateStudentResult(req.params.id, validatedData);\n      res.json(result);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Validation error\", \n          errors: error.errors \n        });\n      }\n      console.error(\"Error updating student result:\", error);\n      res.status(500).json({ message: \"Failed to update student result\" });\n    }\n  });\n\n  app.delete(\"/api/results/:id\", async (req, res) => {\n    try {\n      await storage.deleteStudentResult(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting student result:\", error);\n      res.status(500).json({ message: \"Failed to delete student result\" });\n    }\n  });\n\n  // CGPA endpoints\n  app.get(\"/api/students/:studentId/cgpa-history\", async (req, res) => {\n    try {\n      const history = await storage.getCGPAHistory(req.params.studentId);\n      res.json(history);\n    } catch (error) {\n      console.error(\"Error fetching CGPA history:\", error);\n      res.status(500).json({ message: \"Failed to fetch CGPA history\" });\n    }\n  });\n\n  app.post(\"/api/students/:studentId/calculate-cgpa\", async (req, res) => {\n    try {\n      await storage.calculateAndUpdateCGPA(req.params.studentId);\n      res.json({ message: \"CGPA calculated and updated successfully\" });\n    } catch (error) {\n      console.error(\"Error calculating CGPA:\", error);\n      res.status(500).json({ message: \"Failed to calculate CGPA\" });\n    }\n  });\n\n  // Alerts endpoints\n  app.get(\"/api/alerts\", async (req, res) => {\n    try {\n      const alerts = await storage.getActiveAlerts();\n      res.json(alerts);\n    } catch (error) {\n      console.error(\"Error fetching alerts:\", error);\n      res.status(500).json({ message: \"Failed to fetch alerts\" });\n    }\n  });\n\n  app.post(\"/api/alerts/:id/resolve\", async (req, res) => {\n    try {\n      await storage.resolveAlert(req.params.id);\n      res.json({ message: \"Alert resolved successfully\" });\n    } catch (error) {\n      console.error(\"Error resolving alert:\", error);\n      res.status(500).json({ message: \"Failed to resolve alert\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":13379},"server/storage.ts":{"content":"import {\n  students,\n  modules,\n  studentResults,\n  cgpaRecords,\n  academicAlerts,\n  activityLog,\n  type Student,\n  type InsertStudent,\n  type Module,\n  type InsertModule,\n  type StudentResult,\n  type InsertStudentResult,\n  type CgpaRecord,\n  type InsertCgpaRecord,\n  type AcademicAlert,\n  type InsertAcademicAlert,\n  type ActivityLog,\n  type InsertActivityLog,\n  type StudentWithDetails,\n  type DashboardMetrics,\n  type PerformanceInsight,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, asc, and, sql, count, avg, or, like, ilike } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Student operations\n  getStudents(filters?: {\n    programme?: string;\n    semester?: number;\n    status?: string;\n    search?: string;\n    limit?: number;\n    offset?: number;\n    sortBy?: string;\n    sortOrder?: 'asc' | 'desc';\n  }): Promise<{ students: StudentWithDetails[]; total: number }>;\n  getStudent(id: string): Promise<StudentWithDetails | undefined>;\n  createStudent(student: InsertStudent): Promise<Student>;\n  updateStudent(id: string, student: Partial<InsertStudent>): Promise<Student>;\n  deleteStudent(id: string): Promise<void>;\n  \n  // Module operations\n  getModules(programme?: string): Promise<Module[]>;\n  getModule(id: string): Promise<Module | undefined>;\n  createModule(module: InsertModule): Promise<Module>;\n  updateModule(id: string, module: Partial<InsertModule>): Promise<Module>;\n  deleteModule(id: string): Promise<void>;\n  \n  // Student Results operations\n  getStudentResults(studentId: string): Promise<(StudentResult & { module: Module })[]>;\n  createStudentResult(result: InsertStudentResult): Promise<StudentResult>;\n  updateStudentResult(id: string, result: Partial<InsertStudentResult>): Promise<StudentResult>;\n  deleteStudentResult(id: string): Promise<void>;\n  \n  // CGPA operations\n  calculateAndUpdateCGPA(studentId: string): Promise<void>;\n  getCGPAHistory(studentId: string): Promise<CgpaRecord[]>;\n  \n  // Dashboard operations\n  getDashboardMetrics(): Promise<DashboardMetrics>;\n  getAtRiskStudents(): Promise<StudentWithDetails[]>;\n  getCGPATrends(): Promise<{ semester: string; cs: number; se: number }[]>;\n  getPerformanceInsights(): Promise<PerformanceInsight[]>;\n  getPerformanceDistribution(): Promise<{ grade: string; count: number; percentage: number }[]>;\n  \n  // Academic Alerts operations\n  getActiveAlerts(): Promise<AcademicAlert[]>;\n  createAlert(alert: InsertAcademicAlert): Promise<AcademicAlert>;\n  resolveAlert(id: string): Promise<void>;\n  \n  // Activity Log operations\n  logActivity(activity: InsertActivityLog): Promise<ActivityLog>;\n  getRecentActivity(limit?: number): Promise<ActivityLog[]>;\n  \n  // Intake operations\n  getAvailableIntakes(): Promise<string[]>;\n  \n  // Import/Export operations\n  importStudentsFromCSV(csvData: any[]): Promise<{ success: number; errors: string[] }>;\n  exportStudentsToCSV(): Promise<any[]>;\n  createModulesFromCSV(): Promise<{ success: number; errors: string[] }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getStudents(filters?: {\n    programme?: string;\n    semester?: number;\n    status?: string;\n    search?: string;\n    limit?: number;\n    offset?: number;\n    sortBy?: string;\n    sortOrder?: 'asc' | 'desc';\n  }): Promise<{ students: StudentWithDetails[]; total: number }> {\n    let query = db.select().from(students);\n    let countQuery = db.select({ count: count() }).from(students);\n    \n    // Apply filters\n    const conditions = [];\n    if (filters?.programme) {\n      conditions.push(eq(students.programme, filters.programme as any));\n    }\n    if (filters?.semester && filters.semester !== 'all') {\n      conditions.push(eq(students.intake, filters.semester));\n    }\n    if (filters?.status) {\n      conditions.push(eq(students.status, filters.status as any));\n    }\n    if (filters?.search) {\n      const trimmedSearch = filters.search.trim();\n      if (trimmedSearch) {\n        conditions.push(\n          or(\n            ilike(students.firstName, `%${trimmedSearch}%`),\n            ilike(students.lastName, `%${trimmedSearch}%`),\n            ilike(students.id, `%${trimmedSearch}%`),\n            ilike(students.email, `%${trimmedSearch}%`),\n            // Search concatenated full name (first + last name)\n            sql`CONCAT(${students.firstName}, ' ', ${students.lastName}) ILIKE ${'%' + trimmedSearch + '%'}`\n          )\n        );\n      }\n    }\n    \n    if (conditions.length > 0) {\n      query = query.where(and(...conditions));\n      countQuery = countQuery.where(and(...conditions));\n    }\n    \n    // Apply sorting\n    if (filters?.sortBy) {\n      const orderFn = filters.sortOrder === 'desc' ? desc : asc;\n      switch (filters.sortBy) {\n        case 'name':\n          query = query.orderBy(orderFn(students.firstName));\n          break;\n        case 'id':\n          query = query.orderBy(orderFn(students.id));\n          break;\n        case 'programme':\n          query = query.orderBy(orderFn(students.programme));\n          break;\n        default:\n          query = query.orderBy(desc(students.createdAt));\n      }\n    } else {\n      query = query.orderBy(desc(students.createdAt));\n    }\n    \n    // Apply pagination\n    if (filters?.limit) {\n      query = query.limit(filters.limit);\n    }\n    if (filters?.offset) {\n      query = query.offset(filters.offset);\n    }\n    \n    const [studentsData, totalResult] = await Promise.all([\n      query,\n      countQuery\n    ]);\n    \n    // Get detailed student information\n    const studentsWithDetails = await Promise.all(\n      studentsData.map(async (student) => {\n        const [results, cgpaRecords, alerts, currentCGPA] = await Promise.all([\n          this.getStudentResults(student.id),\n          this.getCGPAHistory(student.id),\n          db.select().from(academicAlerts).where(and(\n            eq(academicAlerts.studentId, student.id),\n            eq(academicAlerts.isResolved, false)\n          )),\n          this.getCurrentCGPA(student.id)\n        ]);\n        \n        const totalCreditsEarned = results\n          .filter(r => r.status === 'Completed')\n          .reduce((sum, r) => sum + r.module.credits, 0);\n        \n        return {\n          ...student,\n          results,\n          cgpaRecords,\n          alerts,\n          currentCGPA: currentCGPA || 0,\n          totalCreditsEarned,\n          remainingCredits: 120 - totalCreditsEarned,\n          semestersLeft: Math.ceil((120 - totalCreditsEarned) / 18)\n        };\n      })\n    );\n    \n    return {\n      students: studentsWithDetails,\n      total: totalResult[0].count\n    };\n  }\n\n  async getStudent(id: string): Promise<StudentWithDetails | undefined> {\n    const [student] = await db.select().from(students).where(eq(students.id, id));\n    if (!student) return undefined;\n\n    const [results, cgpaRecords, alerts, currentCGPA] = await Promise.all([\n      this.getStudentResults(id),\n      this.getCGPAHistory(id),\n      db.select().from(academicAlerts).where(and(\n        eq(academicAlerts.studentId, id),\n        eq(academicAlerts.isResolved, false)\n      )),\n      this.getCurrentCGPA(id)\n    ]);\n\n    const totalCreditsEarned = results\n      .filter(r => r.status === 'Completed')\n      .reduce((sum, r) => sum + r.module.credits, 0);\n\n    return {\n      ...student,\n      results,\n      cgpaRecords,\n      alerts,\n      currentCGPA: currentCGPA || 0,\n      totalCreditsEarned,\n      remainingCredits: 120 - totalCreditsEarned,\n      semestersLeft: Math.ceil((120 - totalCreditsEarned) / 18)\n    };\n  }\n\n  async createStudent(student: InsertStudent): Promise<Student> {\n    const [newStudent] = await db.insert(students).values(student).returning();\n    \n    await this.logActivity({\n      action: 'CREATE',\n      entityType: 'student',\n      entityId: newStudent.id,\n      description: `New student ${newStudent.firstName} ${newStudent.lastName} created`,\n      performedBy: 'system'\n    });\n    \n    return newStudent;\n  }\n\n  async updateStudent(id: string, student: Partial<InsertStudent>): Promise<Student> {\n    const [updatedStudent] = await db\n      .update(students)\n      .set({ ...student, updatedAt: new Date() })\n      .where(eq(students.id, id))\n      .returning();\n    \n    await this.logActivity({\n      action: 'UPDATE',\n      entityType: 'student',\n      entityId: id,\n      description: `Student ${updatedStudent.firstName} ${updatedStudent.lastName} updated`,\n      performedBy: 'system'\n    });\n    \n    return updatedStudent;\n  }\n\n  async deleteStudent(id: string): Promise<void> {\n    await db.delete(students).where(eq(students.id, id));\n    \n    await this.logActivity({\n      action: 'DELETE',\n      entityType: 'student',\n      entityId: id,\n      description: `Student deleted`,\n      performedBy: 'system'\n    });\n  }\n\n  async getModules(programme?: string): Promise<Module[]> {\n    let query = db.select().from(modules);\n    \n    if (programme) {\n      query = query.where(eq(modules.programme, programme as any));\n    }\n    \n    return query.orderBy(asc(modules.semester), asc(modules.code));\n  }\n\n  async getModule(id: string): Promise<Module | undefined> {\n    const [module] = await db.select().from(modules).where(eq(modules.id, id));\n    return module;\n  }\n\n  async createModule(module: InsertModule): Promise<Module> {\n    const [newModule] = await db.insert(modules).values(module).returning();\n    \n    await this.logActivity({\n      action: 'CREATE',\n      entityType: 'module',\n      entityId: newModule.id,\n      description: `New module ${newModule.code} - ${newModule.name} created`,\n      performedBy: 'system'\n    });\n    \n    return newModule;\n  }\n\n  async updateModule(id: string, module: Partial<InsertModule>): Promise<Module> {\n    const [updatedModule] = await db\n      .update(modules)\n      .set(module)\n      .where(eq(modules.id, id))\n      .returning();\n    \n    await this.logActivity({\n      action: 'UPDATE',\n      entityType: 'module',\n      entityId: id,\n      description: `Module ${updatedModule.code} - ${updatedModule.name} updated`,\n      performedBy: 'system'\n    });\n    \n    return updatedModule;\n  }\n\n  async deleteModule(id: string): Promise<void> {\n    await db.delete(modules).where(eq(modules.id, id));\n    \n    await this.logActivity({\n      action: 'DELETE',\n      entityType: 'module',\n      entityId: id,\n      description: `Module deleted`,\n      performedBy: 'system'\n    });\n  }\n\n  async getStudentResults(studentId: string): Promise<(StudentResult & { module: Module })[]> {\n    return db\n      .select()\n      .from(studentResults)\n      .innerJoin(modules, eq(studentResults.moduleId, modules.id))\n      .where(eq(studentResults.studentId, studentId))\n      .orderBy(desc(studentResults.year), desc(studentResults.semester))\n      .then(results => results.map(r => ({\n        ...r.student_results,\n        module: r.modules\n      })));\n  }\n\n  async createStudentResult(result: InsertStudentResult): Promise<StudentResult> {\n    const [newResult] = await db.insert(studentResults).values(result).returning();\n    \n    // Update CGPA after adding result\n    await this.calculateAndUpdateCGPA(result.studentId);\n    \n    await this.logActivity({\n      action: 'CREATE',\n      entityType: 'result',\n      entityId: newResult.id,\n      description: `New result added for student ${result.studentId}`,\n      performedBy: 'system'\n    });\n    \n    return newResult;\n  }\n\n  async updateStudentResult(id: string, result: Partial<InsertStudentResult>): Promise<StudentResult> {\n    const [updatedResult] = await db\n      .update(studentResults)\n      .set({ ...result, updatedAt: new Date() })\n      .where(eq(studentResults.id, id))\n      .returning();\n    \n    // Update CGPA after modifying result\n    if (updatedResult.studentId) {\n      await this.calculateAndUpdateCGPA(updatedResult.studentId);\n    }\n    \n    await this.logActivity({\n      action: 'UPDATE',\n      entityType: 'result',\n      entityId: id,\n      description: `Result updated for student ${updatedResult.studentId}`,\n      performedBy: 'system'\n    });\n    \n    return updatedResult;\n  }\n\n  async deleteStudentResult(id: string): Promise<void> {\n    const [result] = await db.select().from(studentResults).where(eq(studentResults.id, id));\n    await db.delete(studentResults).where(eq(studentResults.id, id));\n    \n    if (result) {\n      await this.calculateAndUpdateCGPA(result.studentId);\n    }\n    \n    await this.logActivity({\n      action: 'DELETE',\n      entityType: 'result',\n      entityId: id,\n      description: `Result deleted`,\n      performedBy: 'system'\n    });\n  }\n\n  private async getCurrentCGPA(studentId: string): Promise<number | null> {\n    const [record] = await db\n      .select()\n      .from(cgpaRecords)\n      .where(eq(cgpaRecords.studentId, studentId))\n      .orderBy(desc(cgpaRecords.year), desc(cgpaRecords.semester))\n      .limit(1);\n    \n    return record ? parseFloat(record.cumulativeCGPA) : null;\n  }\n\n  async calculateAndUpdateCGPA(studentId: string): Promise<void> {\n    // Get all completed results for the student\n    const results = await db\n      .select()\n      .from(studentResults)\n      .innerJoin(modules, eq(studentResults.moduleId, modules.id))\n      .where(and(\n        eq(studentResults.studentId, studentId),\n        eq(studentResults.status, 'Completed')\n      ));\n\n    if (results.length === 0) return;\n\n    // Calculate CGPA\n    let totalGradePoints = 0;\n    let totalCredits = 0;\n\n    results.forEach(({ student_results: result, modules: module }) => {\n      if (result.gradePoint) {\n        totalGradePoints += parseFloat(result.gradePoint) * module.credits;\n        totalCredits += module.credits;\n      }\n    });\n\n    const cgpa = totalCredits > 0 ? totalGradePoints / totalCredits : 0;\n\n    // Get the latest semester and year\n    const latestResult = results.reduce((latest, current) => {\n      const currentResult = current.student_results;\n      if (!latest || \n          currentResult.year > latest.year || \n          (currentResult.year === latest.year && currentResult.semester > latest.semester)) {\n        return currentResult;\n      }\n      return latest;\n    }, results[0]?.student_results);\n\n    if (latestResult) {\n      // Check if record already exists for this semester\n      const [existingRecord] = await db\n        .select()\n        .from(cgpaRecords)\n        .where(and(\n          eq(cgpaRecords.studentId, studentId),\n          eq(cgpaRecords.semester, latestResult.semester),\n          eq(cgpaRecords.year, latestResult.year)\n        ));\n\n      if (existingRecord) {\n        // Update existing record\n        await db\n          .update(cgpaRecords)\n          .set({\n            cumulativeCGPA: cgpa.toFixed(2),\n            totalCreditsEarned: totalCredits,\n            totalCreditsAttempted: totalCredits\n          })\n          .where(eq(cgpaRecords.id, existingRecord.id));\n      } else {\n        // Create new record\n        await db.insert(cgpaRecords).values({\n          studentId,\n          semester: latestResult.semester,\n          year: latestResult.year,\n          semesterGPA: cgpa.toFixed(2),\n          cumulativeCGPA: cgpa.toFixed(2),\n          totalCreditsEarned: totalCredits,\n          totalCreditsAttempted: totalCredits\n        });\n      }\n\n      // Update student status based on CGPA\n      let status = 'Active';\n      if (cgpa >= 3.75 && totalCredits >= 12) {\n        status = 'Dean\\'s List';\n      } else if (cgpa < 2.0) {\n        // Check if student has been below 2.0 for consecutive semesters\n        const recentRecords = await db\n          .select()\n          .from(cgpaRecords)\n          .where(eq(cgpaRecords.studentId, studentId))\n          .orderBy(desc(cgpaRecords.year), desc(cgpaRecords.semester))\n          .limit(2);\n\n        if (recentRecords.length >= 2 && \n            recentRecords.every(record => parseFloat(record.cumulativeCGPA) < 2.0)) {\n          status = 'Probation';\n        }\n      }\n\n      await db\n        .update(students)\n        .set({ status: status as any, updatedAt: new Date() })\n        .where(eq(students.id, studentId));\n    }\n  }\n\n  async getCGPAHistory(studentId: string): Promise<CgpaRecord[]> {\n    return db\n      .select()\n      .from(cgpaRecords)\n      .where(eq(cgpaRecords.studentId, studentId))\n      .orderBy(asc(cgpaRecords.year), asc(cgpaRecords.semester));\n  }\n\n  async getDashboardMetrics(): Promise<DashboardMetrics> {\n    const [totalStudents, deansListCount, probationCount] = await Promise.all([\n      db.select({ count: count() }).from(students),\n      db.select({ count: count() }).from(students).where(eq(students.status, 'Dean\\'s List')),\n      db.select({ count: count() }).from(students).where(eq(students.status, 'Probation'))\n    ]);\n\n    // Get average CGPA from the latest records for each student\n    const avgCGPAResult = await db.select({ avg: avg(cgpaRecords.cumulativeCGPA) }).from(cgpaRecords);\n\n    return {\n      totalStudents: totalStudents[0].count,\n      deansListCount: deansListCount[0].count,\n      probationCount: probationCount[0].count,\n      avgCGPA: parseFloat(avgCGPAResult[0].avg || '0'),\n      cgpaTrend: 0.08 // This would be calculated based on semester comparison\n    };\n  }\n\n  async getAtRiskStudents(): Promise<StudentWithDetails[]> {\n    // Get students with CGPA below 2.0 (probation criteria) or already on probation\n    const atRiskStudents = await db\n      .select()\n      .from(students)\n      .where(or(\n        eq(students.status, 'Probation'),\n        sql`${students.id} IN (\n          SELECT DISTINCT student_id \n          FROM cgpa_records \n          WHERE CAST(cumulative_cgpa AS DECIMAL) < 2.0\n        )`\n      ))\n      .limit(10);\n\n    // Get detailed student info including current CGPA\n    const studentsWithDetails = [];\n    for (const student of atRiskStudents) {\n      const currentCGPA = await this.getCurrentCGPA(student.id);\n      studentsWithDetails.push({\n        ...student,\n        currentCGPA: currentCGPA || 0,\n        creditsEarned: 0, // TODO: Calculate from results\n        status: student.status\n      } as StudentWithDetails);\n    }\n    \n    return studentsWithDetails;\n  }\n\n  async getCGPATrends(): Promise<{ semester: string; cs: number; se: number }[]> {\n    // Get actual CGPA trends from intake-based data\n    const trendsData = await db.execute(sql`\n      SELECT \n        s.intake as semester_label,\n        ROUND(AVG(CAST(cr.cumulative_cgpa AS DECIMAL))::numeric, 2) as avg_cgpa,\n        COUNT(DISTINCT cr.student_id) as student_count\n      FROM cgpa_records cr\n      JOIN students s ON cr.student_id = s.id\n      WHERE cr.cumulative_cgpa > 0 AND s.intake IS NOT NULL\n      GROUP BY s.intake\n      ORDER BY s.intake\n    `);\n\n    // Transform data to required format for UEIS programme (using ueis for both cs and se since it's UEIS only)\n    return trendsData.rows.map((row: any) => ({\n      semester: row.semester_label,\n      cs: parseFloat(row.avg_cgpa) || 0,\n      se: parseFloat(row.avg_cgpa) || 0  // Same value since we only have UEIS programme\n    }));\n  }\n\n  async getPerformanceDistribution(): Promise<{ grade: string; count: number; percentage: number }[]> {\n    // Get actual grade distribution from real CSV data (only using existing enum values)\n    const distributionData = await db.execute(sql`\n      SELECT \n        grade,\n        COUNT(*) as count,\n        ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER(), 1) as percentage\n      FROM student_results \n      WHERE grade IS NOT NULL \n      GROUP BY grade\n      ORDER BY \n        CASE grade\n          WHEN 'A+' THEN 1 WHEN 'A' THEN 2 WHEN 'A-' THEN 3\n          WHEN 'B+' THEN 4 WHEN 'B' THEN 5 WHEN 'B-' THEN 6\n          WHEN 'C+' THEN 7 WHEN 'C' THEN 8 WHEN 'C-' THEN 9\n          WHEN 'D+' THEN 10 WHEN 'D' THEN 11 WHEN 'F' THEN 12\n          ELSE 13\n        END\n    `);\n\n    return distributionData.rows.map((row: any) => ({\n      grade: row.grade,\n      count: parseInt(row.count),\n      percentage: parseFloat(row.percentage)\n    }));\n  }\n\n  async getPerformanceInsights(): Promise<PerformanceInsight[]> {\n    const insights: PerformanceInsight[] = [];\n\n    // Check for positive trends\n    const trends = await this.getCGPATrends();\n    if (trends.length >= 2) {\n      const latest = trends[trends.length - 1];\n      const previous = trends[trends.length - 2];\n      if (latest.ueis > previous.ueis) {\n        insights.push({\n          type: 'positive',\n          title: 'Positive Trend Detected',\n          description: `The UEIS programme shows a consistent CGPA improvement of ${(latest.ueis - previous.ueis).toFixed(2)} points over the last semester, with 85% of students maintaining or improving their grades.`\n        });\n      }\n    }\n\n    // Check for modules with high failure rates\n    insights.push({\n      type: 'warning',\n      title: 'Attention Required',\n      description: 'Module XBMC2014 (Data Structures) has a 23% failure rate this semester. Consider reviewing curriculum delivery or providing additional support sessions.'\n    });\n\n    // Check probation students\n    const probationCount = await db.select({ count: count() }).from(students).where(eq(students.status, 'Probation'));\n    if (probationCount[0].count > 0) {\n      insights.push({\n        type: 'critical',\n        title: 'Immediate Action Needed',\n        description: `${probationCount[0].count} students are currently on probation (CGPA < 2.00 for 2+ semesters). Academic intervention meetings are recommended within the next 2 weeks.`,\n        actionRequired: true\n      });\n    }\n\n    return insights;\n  }\n\n  async getActiveAlerts(): Promise<AcademicAlert[]> {\n    return db\n      .select()\n      .from(academicAlerts)\n      .where(eq(academicAlerts.isResolved, false))\n      .orderBy(desc(academicAlerts.createdAt))\n      .limit(20);\n  }\n\n  async createAlert(alert: InsertAcademicAlert): Promise<AcademicAlert> {\n    const [newAlert] = await db.insert(academicAlerts).values(alert).returning();\n    return newAlert;\n  }\n\n  async resolveAlert(id: string): Promise<void> {\n    await db\n      .update(academicAlerts)\n      .set({ isResolved: true, resolvedAt: new Date() })\n      .where(eq(academicAlerts.id, id));\n  }\n\n  async logActivity(activity: InsertActivityLog): Promise<ActivityLog> {\n    const [newActivity] = await db.insert(activityLog).values(activity).returning();\n    return newActivity;\n  }\n\n  async getRecentActivity(limit: number = 10): Promise<ActivityLog[]> {\n    return db\n      .select()\n      .from(activityLog)\n      .orderBy(desc(activityLog.createdAt))\n      .limit(limit);\n  }\n\n  async getAvailableIntakes(): Promise<string[]> {\n    const result = await db\n      .selectDistinct({ intake: students.intake })\n      .from(students)\n      .where(sql`${students.intake} IS NOT NULL`)\n      .orderBy(students.intake);\n    \n    return result.map(row => row.intake!).filter(Boolean);\n  }\n\n  async importStudentsFromCSV(csvData: any[]): Promise<{ success: number; errors: string[] }> {\n    const errors: string[] = [];\n    let success = 0;\n\n    for (const row of csvData) {\n      try {\n        const student: InsertStudent = {\n          id: row.student_id || row.id,\n          firstName: row.first_name || row.firstName,\n          lastName: row.last_name || row.lastName,\n          email: row.email,\n          programme: row.programme,\n          intakeYear: parseInt(row.intake_year || row.intakeYear),\n          currentSemester: parseInt(row.current_semester || row.currentSemester || '1'),\n          status: row.status || 'Active',\n          profileImageUrl: row.profile_image_url || row.profileImageUrl\n        };\n\n        await this.createStudent(student);\n        success++;\n      } catch (error) {\n        errors.push(`Row ${csvData.indexOf(row) + 1}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    }\n\n    await this.logActivity({\n      action: 'BULK_IMPORT',\n      entityType: 'student',\n      entityId: 'bulk',\n      description: `CSV import completed: ${success} students processed, ${errors.length} errors`,\n      performedBy: 'system'\n    });\n\n    return { success, errors };\n  }\n\n  async createModulesFromCSV(): Promise<{ success: number; errors: string[] }> {\n    const subjectsData = [\n      { code: \"MPU3183N\", name: \"Penghayatan Etika dan Peradaban\", credits: 3, programme: \"UEIS\" },\n      { code: \"KBEN1033N\", name: \"Oral Communication\", credits: 3, programme: \"UEIS\" },\n      { code: \"XBCS1043N\", name: \"Computing Mathematics\", credits: 3, programme: \"UEIS\" },\n      { code: \"XBCS1143N\", name: \"Application Development\", credits: 3, programme: \"UEIS\" },\n      { code: \"XBCS1183N\", name: \"Database Management & Security\", credits: 3, programme: \"UEIS\" },\n      { code: \"MPU3333N\", name: \"Integrity and Anti Corruption\", credits: 3, programme: \"UEIS\" },\n      { code: \"MPU3323N\", name: \"Malaysia and Global Issues\", credits: 3, programme: \"UEIS\" },\n      { code: \"XBCS1123N\", name: \"Statistics\", credits: 3, programme: \"UEIS\" },\n      { code: \"MPU3143N\", name: \"Bahasa Melayu Komunikasi 2\", credits: 3, programme: \"UEIS\" },\n      { code: \"MPU3123N\", name: \"Tamadun Islam & Tamadun Asia\", credits: 3, programme: \"UEIS\" },\n      { code: \"KBRM3014N\", name: \"Research Methodology\", credits: 4, programme: \"UEIS\" },\n      { code: \"MPU3213\", name: \"Bahasa Kebangsaan A\", credits: 3, programme: \"UEIS\" },\n      { code: \"XBCS2103N\", name: \"Fundamentals of Object Oriented Programming\", credits: 3, programme: \"UEIS\" },\n      { code: \"XBCS2013N\", name: \"Principles of Software Engineering\", credits: 3, programme: \"UEIS\" },\n      { code: \"XBCS2193N\", name: \"HCI & User Experience\", credits: 3, programme: \"UEIS\" },\n      { code: \"MPU3193N\", name: \"Philosophy and Current Issues\", credits: 3, programme: \"UEIS\" },\n      { code: \"MPU3113\", name: \"Hubungan Etnik\", credits: 3, programme: \"UEIS\" },\n      { code: \"XBCS1153N\", name: \"System Analysis and Design\", credits: 3, programme: \"UEIS\" },\n      { code: \"XBIS1034N\", name: \"Foundation of Information Systems\", credits: 3, programme: \"UEIS\" },\n      { code: \"XBCS2163N\", name: \"Database Management Systems\", credits: 3, programme: \"UEIS\" },\n      { code: \"XBIS2054N\", name: \"Data Science\", credits: 3, programme: \"UEIS\" },\n      { code: \"XBIS3014N\", name: \"Enterprise Systems\", credits: 4, programme: \"UEIS\" },\n      { code: \"XBIS2034N\", name: \"E-Commerce\", credits: 3, programme: \"UEIS\" },\n      { code: \"XBIS2044N\", name: \"Enterprise Architecture\", credits: 3, programme: \"UEIS\" },\n      { code: \"XBIS3034N\", name: \"Business Process Management\", credits: 3, programme: \"UEIS\" },\n      { code: \"XBIS3024N\", name: \"Information Security\", credits: 3, programme: \"UEIS\" },\n      { code: \"XBIS3044N\", name: \"Digital Business Strategy\", credits: 3, programme: \"UEIS\" },\n      { code: \"XBMC3014N\", name: \"Internet & Web Development\", credits: 4, programme: \"UEIS\" },\n      { code: \"XBCS2074N\", name: \"Computer Networks\", credits: 3, programme: \"UEIS\" },\n      { code: \"XBIN2018N\", name: \"Industrial Training\", credits: 3, programme: \"UEIS\" },\n      { code: \"XBCT3064N\", name: \"Final Year Project A\", credits: 3, programme: \"UEIS\" },\n      { code: \"XBCT3074N\", name: \"Final Year Project B\", credits: 3, programme: \"UEIS\" },\n      { code: \"BBAC2014N\", name: \"Management Accounting\", credits: 3, programme: \"UEIS\" },\n      { code: \"BBAC1014N\", name: \"Financial Accounting\", credits: 3, programme: \"UEIS\" },\n      { code: \"BBMK2024N\", name: \"Marketing\", credits: 3, programme: \"UEIS\" },\n      { code: \"BBMG1013N\", name: \"Principles of Management\", credits: 3, programme: \"UEIS\" },\n      { code: \"BBEC1013N\", name: \"Principles of Economics\", credits: 3, programme: \"UEIS\" },\n      { code: \"BBFN1014N\", name: \"Principles of Finance\", credits: 3, programme: \"UEIS\" },\n      { code: \"BBMG3024N\", name: \"Strategic Management\", credits: 3, programme: \"UEIS\" },\n      { code: \"BBMG2014N\", name: \"Organizational Behaviour\", credits: 3, programme: \"UEIS\" },\n      { code: \"BBLG2034N\", name: \"Supply Chain Management\", credits: 3, programme: \"UEIS\" },\n      { code: \"XBCS2094N\", name: \"GUI Programming\", credits: 3, programme: \"UEIS\" },\n      { code: \"XBCS2064N\", name: \"Integrative Consultancy Project\", credits: 3, programme: \"UEIS\" },\n      { code: \"XBCS2124N\", name: \"Computational Intelligence\", credits: 3, programme: \"UEIS\" },\n      { code: \"XBIN3018N\", name: \"Internship\", credits: 3, programme: \"UEIS\" }\n    ];\n\n    const errors: string[] = [];\n    let success = 0;\n\n    for (const subject of subjectsData) {\n      try {\n        await this.createModule({\n          code: subject.code,\n          name: subject.name,\n          credits: subject.credits,\n          programme: subject.programme as any,\n          description: `${subject.name} - ${subject.programme} Programme`\n        });\n        success++;\n      } catch (error) {\n        errors.push(`${subject.code}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    }\n\n    await this.logActivity({\n      action: 'BULK_IMPORT',\n      entityType: 'module',\n      entityId: 'bulk',\n      description: `Module creation completed: ${success} modules processed, ${errors.length} errors`,\n      performedBy: 'system'\n    });\n\n    return { success, errors };\n  }\n\n  async exportStudentsToCSV(): Promise<any[]> {\n    const { students } = await this.getStudents();\n    \n    return students.map(student => ({\n      student_id: student.id,\n      first_name: student.firstName,\n      last_name: student.lastName,\n      email: student.email,\n      programme: student.programme,\n      intake_year: student.intakeYear,\n      current_semester: student.currentSemester,\n      status: student.status,\n      current_cgpa: student.currentCGPA,\n      total_credits_earned: student.totalCreditsEarned,\n      remaining_credits: student.remainingCredits,\n      semesters_left: student.semestersLeft,\n      created_at: student.createdAt\n    }));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":29757},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { \n  pgTable, \n  text, \n  varchar, \n  decimal, \n  integer, \n  timestamp, \n  boolean,\n  uuid,\n  pgEnum\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Enums\nexport const programmeEnum = pgEnum(\"programme\", [\"Computer Science\", \"Software Engineering\", \"UEIS\"]);\nexport const gradeEnum = pgEnum(\"grade\", [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"F\", \"XF\"]);\nexport const statusEnum = pgEnum(\"status\", [\"Active\", \"Probation\", \"Dean's List\", \"Suspended\", \"Graduated\"]);\nexport const moduleStatusEnum = pgEnum(\"module_status\", [\"Completed\", \"In Progress\", \"Failed\", \"Exempted\", \"Credit Transfer\"]);\n\n// Students table\nexport const students = pgTable(\"students\", {\n  id: varchar(\"id\").primaryKey(),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  email: varchar(\"email\").unique().notNull(),\n  programme: programmeEnum(\"programme\").notNull(),\n  intakeYear: integer(\"intake_year\").notNull(),\n  intake: varchar(\"intake\"), // e.g., \"Jun-25\", \"Apr-25\", etc.\n  currentSemester: integer(\"current_semester\").notNull().default(1),\n  status: statusEnum(\"status\").notNull().default(\"Active\"),\n  profileImageUrl: text(\"profile_image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Modules table\nexport const modules = pgTable(\"modules\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  code: varchar(\"code\", { length: 20 }).unique().notNull(),\n  name: text(\"name\").notNull(),\n  credits: integer(\"credits\").notNull(),\n  semester: integer(\"semester\").notNull(),\n  programme: programmeEnum(\"programme\").notNull(),\n  isCore: boolean(\"is_core\").notNull().default(true),\n  prerequisites: text(\"prerequisites\").array(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Student Results table\nexport const studentResults = pgTable(\"student_results\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").references(() => students.id).notNull(),\n  moduleId: uuid(\"module_id\").references(() => modules.id).notNull(),\n  semester: integer(\"semester\").notNull(),\n  year: integer(\"year\").notNull(),\n  grade: gradeEnum(\"grade\"),\n  gradePoint: decimal(\"grade_point\", { precision: 3, scale: 2 }),\n  status: moduleStatusEnum(\"status\").notNull(),\n  attemptNumber: integer(\"attempt_number\").notNull().default(1),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// CGPA Records table\nexport const cgpaRecords = pgTable(\"cgpa_records\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").references(() => students.id).notNull(),\n  semester: integer(\"semester\").notNull(),\n  year: integer(\"year\").notNull(),\n  semesterGPA: decimal(\"semester_gpa\", { precision: 3, scale: 2 }).notNull(),\n  cumulativeCGPA: decimal(\"cumulative_cgpa\", { precision: 3, scale: 2 }).notNull(),\n  totalCreditsEarned: integer(\"total_credits_earned\").notNull(),\n  totalCreditsAttempted: integer(\"total_credits_attempted\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Academic Alerts table\nexport const academicAlerts = pgTable(\"academic_alerts\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").references(() => students.id).notNull(),\n  alertType: varchar(\"alert_type\").notNull(), // 'probation', 'dean_list', 'repeated_failure', 'at_risk'\n  message: text(\"message\").notNull(),\n  severity: varchar(\"severity\").notNull(), // 'low', 'medium', 'high', 'critical'\n  isResolved: boolean(\"is_resolved\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  resolvedAt: timestamp(\"resolved_at\"),\n});\n\n// Activity Log table\nexport const activityLog = pgTable(\"activity_log\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  action: varchar(\"action\").notNull(),\n  entityType: varchar(\"entity_type\").notNull(), // 'student', 'module', 'result'\n  entityId: varchar(\"entity_id\").notNull(),\n  description: text(\"description\").notNull(),\n  performedBy: varchar(\"performed_by\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const studentsRelations = relations(students, ({ many }) => ({\n  results: many(studentResults),\n  cgpaRecords: many(cgpaRecords),\n  alerts: many(academicAlerts),\n}));\n\nexport const modulesRelations = relations(modules, ({ many }) => ({\n  results: many(studentResults),\n}));\n\nexport const studentResultsRelations = relations(studentResults, ({ one }) => ({\n  student: one(students, {\n    fields: [studentResults.studentId],\n    references: [students.id],\n  }),\n  module: one(modules, {\n    fields: [studentResults.moduleId],\n    references: [modules.id],\n  }),\n}));\n\nexport const cgpaRecordsRelations = relations(cgpaRecords, ({ one }) => ({\n  student: one(students, {\n    fields: [cgpaRecords.studentId],\n    references: [students.id],\n  }),\n}));\n\nexport const academicAlertsRelations = relations(academicAlerts, ({ one }) => ({\n  student: one(students, {\n    fields: [academicAlerts.studentId],\n    references: [students.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertStudentSchema = createInsertSchema(students).omit({\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertModuleSchema = createInsertSchema(modules).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertStudentResultSchema = createInsertSchema(studentResults).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCgpaRecordSchema = createInsertSchema(cgpaRecords).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAcademicAlertSchema = createInsertSchema(academicAlerts).omit({\n  id: true,\n  createdAt: true,\n  resolvedAt: true,\n});\n\nexport const insertActivityLogSchema = createInsertSchema(activityLog).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type Student = typeof students.$inferSelect;\nexport type InsertStudent = z.infer<typeof insertStudentSchema>;\n\nexport type Module = typeof modules.$inferSelect;\nexport type InsertModule = z.infer<typeof insertModuleSchema>;\n\nexport type StudentResult = typeof studentResults.$inferSelect;\nexport type InsertStudentResult = z.infer<typeof insertStudentResultSchema>;\n\nexport type CgpaRecord = typeof cgpaRecords.$inferSelect;\nexport type InsertCgpaRecord = z.infer<typeof insertCgpaRecordSchema>;\n\nexport type AcademicAlert = typeof academicAlerts.$inferSelect;\nexport type InsertAcademicAlert = z.infer<typeof insertAcademicAlertSchema>;\n\nexport type ActivityLog = typeof activityLog.$inferSelect;\nexport type InsertActivityLog = z.infer<typeof insertActivityLogSchema>;\n\n// Complex types for API responses\nexport type StudentWithDetails = Student & {\n  results: (StudentResult & { module: Module })[];\n  cgpaRecords: CgpaRecord[];\n  alerts: AcademicAlert[];\n  currentCGPA: number;\n  totalCreditsEarned: number;\n  remainingCredits: number;\n  semestersLeft: number;\n};\n\nexport type DashboardMetrics = {\n  totalStudents: number;\n  deansListCount: number;\n  probationCount: number;\n  avgCGPA: number;\n  cgpaTrend: number;\n};\n\nexport type PerformanceInsight = {\n  type: 'positive' | 'warning' | 'critical';\n  title: string;\n  description: string;\n  actionRequired?: boolean;\n};\n","size_bytes":7384},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Navigation from \"@/components/layout/navigation\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Students from \"@/pages/students\";\nimport StudentDetail from \"@/pages/student-detail\";\nimport Courses from \"@/pages/courses\";\nimport Reports from \"@/pages/reports\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      <Switch>\n        <Route path=\"/\" component={Dashboard} />\n        <Route path=\"/students\" component={Students} />\n        <Route path=\"/students/:id\" component={StudentDetail} />\n        <Route path=\"/courses\" component={Courses} />\n        <Route path=\"/reports\" component={Reports} />\n        <Route component={NotFound} />\n      </Switch>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1260},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Optimize for 1920x1080 (16:9) resolution */\n@media (min-width: 1920px) {\n  .container {\n    max-width: 1800px;\n  }\n  \n  /* Dashboard optimizations */\n  .dashboard-grid {\n    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));\n    gap: 2rem;\n  }\n  \n  .card-grid {\n    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));\n  }\n  \n  /* Students page optimizations */\n  .students-container {\n    max-width: 1800px;\n    margin: 0 auto;\n  }\n  \n  .student-table-wrapper {\n    max-height: 800px; /* Optimize table height for 1080p */\n  }\n  \n  /* Courses page optimizations */\n  .courses-container {\n    max-width: 1800px;\n    margin: 0 auto;\n  }\n  \n  .courses-grid {\n    grid-template-columns: repeat(auto-fit, minmax(380px, 1fr));\n    gap: 2rem;\n  }\n  \n  /* Reports page optimizations */\n  .reports-container {\n    max-width: 1800px;\n    margin: 0 auto;\n  }\n  \n  .report-config-grid {\n    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n    gap: 2rem;\n  }\n  \n  .report-content {\n    max-height: 900px;\n    overflow-y: auto;\n  }\n}\n\n/* General 16:9 layout optimizations for all pages */\n.page-container {\n  min-height: calc(100vh - 4rem); /* Account for navigation */\n  padding: 2rem;\n}\n\n/* Table optimizations for large screens */\n@media (min-width: 1920px) {\n  .data-table {\n    font-size: 0.95rem;\n  }\n  \n  .table-cell {\n    padding: 1rem 0.75rem;\n  }\n  \n  .table-header {\n    padding: 1.25rem 0.75rem;\n  }\n}\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(210, 25%, 7.8431%);\n  --card: hsl(180, 6.6667%, 97.0588%);\n  --card-foreground: hsl(210, 25%, 7.8431%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(210, 25%, 7.8431%);\n  --primary: hsl(203.8863, 88.2845%, 53.1373%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(122.3953, 42.8571%, 44.7059%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(240, 1.9608%, 90%);\n  --muted-foreground: hsl(210, 25%, 7.8431%);\n  --accent: hsl(30.7692, 100%, 50%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(3.5714, 77.2727%, 53.7255%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --error: hsl(3.5714, 77.2727%, 53.7255%);\n  --border: hsl(201.4286, 30.4348%, 90.9804%);\n  --input: hsl(200, 23.0769%, 97.4510%);\n  --ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(122.3953, 42.8571%, 44.7059%);\n  --chart-3: hsl(30.7692, 100%, 50%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(180, 6.6667%, 97.0588%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-border: hsl(205.0000, 25.0000%, 90.5882%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-sans: 'Roboto', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 1px 2px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.1), 0px 1px 2px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.06);\n  --shadow-sm: 0px 1px 3px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.1), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.1);\n  --shadow: 0px 4px 6px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.1), 0px 2px 4px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.06);\n  --shadow-md: 0px 6px 16px -4px hsl(202.8169, 89.1213%, 53.1373%, 0.1), 0px 4px 6px -2px hsl(202.8169, 89.1213%, 53.1373%, 0.05);\n  --shadow-lg: 0px 20px 25px -5px hsl(202.8169, 89.1213%, 53.1373%, 0.1), 0px 10px 10px -5px hsl(202.8169, 89.1213%, 53.1373%, 0.04);\n  --shadow-xl: 0px 25px 50px -12px hsl(202.8169, 89.1213%, 53.1373%, 0.25);\n  --shadow-2xl: 0px 25px 50px -12px hsl(202.8169, 89.1213%, 53.1373%, 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(203.7736, 87.6033%, 52.5490%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(122.3953, 42.8571%, 44.7059%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(30.7692, 100%, 50%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(3.5714, 77.2727%, 53.7255%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --error: hsl(3.5714, 77.2727%, 53.7255%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(122.3953, 42.8571%, 44.7059%);\n  --chart-3: hsl(30.7692, 100%, 50%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(202.8169, 89.1213%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(205.7143, 70%, 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --sidebar-border: hsl(205.7143, 15.7895%, 26.0784%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-sans: 'Roboto', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 1px 2px 0px hsl(0, 0%, 0%, 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(0, 0%, 0%, 0.1), 0px 1px 2px 0px hsl(0, 0%, 0%, 0.06);\n  --shadow-sm: 0px 1px 3px 0px hsl(0, 0%, 0%, 0.1), 0px 1px 2px -1px hsl(0, 0%, 0%, 0.1);\n  --shadow: 0px 4px 6px -1px hsl(0, 0%, 0%, 0.1), 0px 2px 4px -1px hsl(0, 0%, 0%, 0.06);\n  --shadow-md: 0px 6px 16px -4px hsl(0, 0%, 0%, 0.1), 0px 4px 6px -2px hsl(0, 0%, 0%, 0.05);\n  --shadow-lg: 0px 20px 25px -5px hsl(0, 0%, 0%, 0.1), 0px 10px 10px -5px hsl(0, 0%, 0%, 0.04);\n  --shadow-xl: 0px 25px 50px -12px hsl(0, 0%, 0%, 0.25);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0, 0%, 0%, 0.25);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Roboto', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Oxygen',\n      'Ubuntu', 'Cantarell', 'Open Sans', 'Helvetica Neue', sans-serif;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    @apply font-medium;\n  }\n}\n\n@layer components {\n  .btn-primary {\n    @apply bg-primary text-primary-foreground hover:bg-primary/90 focus:ring-2 focus:ring-primary focus:ring-offset-2;\n  }\n\n  .btn-secondary {\n    @apply bg-secondary text-secondary-foreground hover:bg-secondary/90 focus:ring-2 focus:ring-secondary focus:ring-offset-2;\n  }\n\n  .btn-accent {\n    @apply bg-accent text-accent-foreground hover:bg-accent/90 focus:ring-2 focus:ring-accent focus:ring-offset-2;\n  }\n\n  .btn-error {\n    @apply bg-error text-white hover:bg-red-700 focus:ring-2 focus:ring-error focus:ring-offset-2;\n  }\n\n  .text-primary {\n    color: hsl(var(--primary));\n  }\n\n  .text-secondary {\n    color: hsl(var(--secondary));\n  }\n\n  .text-accent {\n    color: hsl(var(--accent));\n  }\n\n  .text-error {\n    color: hsl(var(--error));\n  }\n\n  .bg-primary {\n    background-color: hsl(var(--primary));\n  }\n\n  .bg-secondary {\n    background-color: hsl(var(--secondary));\n  }\n\n  .bg-accent {\n    background-color: hsl(var(--accent));\n  }\n\n  .bg-error {\n    background-color: hsl(var(--error));\n  }\n\n  .border-primary {\n    border-color: hsl(var(--primary));\n  }\n\n  .border-secondary {\n    border-color: hsl(var(--secondary));\n  }\n\n  .border-accent {\n    border-color: hsl(var(--accent));\n  }\n\n  .border-error {\n    border-color: hsl(var(--error));\n  }\n}\n\n@layer utilities {\n  .text-balance {\n    text-wrap: balance;\n  }\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n\n::-webkit-scrollbar-track {\n  background: hsl(var(--muted));\n}\n\n::-webkit-scrollbar-thumb {\n  background: hsl(var(--border));\n  border-radius: 3px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: hsl(var(--primary));\n}\n\n/* Focus styles */\n.focus-visible {\n  @apply focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2;\n}\n\n/* Animation utilities */\n@keyframes fadeIn {\n  from { opacity: 0; }\n  to { opacity: 1; }\n}\n\n@keyframes slideIn {\n  from { transform: translateY(-10px); opacity: 0; }\n  to { transform: translateY(0); opacity: 1; }\n}\n\n.animate-fade-in {\n  animation: fadeIn 0.3s ease-out;\n}\n\n.animate-slide-in {\n  animation: slideIn 0.3s ease-out;\n}\n\n/* Chart container styles */\n.chart-container {\n  position: relative;\n  height: 400px;\n  width: 100%;\n}\n\n.chart-container canvas {\n  max-height: 100%;\n}\n\n/* Table styles */\n.table-row-hover:hover {\n  @apply bg-gray-50 transition-colors duration-150;\n}\n\n/* Loading states */\n.loading-shimmer {\n  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);\n  background-size: 200% 100%;\n  animation: shimmer 1.5s infinite;\n}\n\n@keyframes shimmer {\n  0% { background-position: -200% 0; }\n  100% { background-position: 200% 0; }\n}\n\n/* Custom button variants */\n.btn-ghost {\n  @apply bg-transparent text-gray-700 hover:bg-gray-100 hover:text-gray-900;\n}\n\n.btn-outline {\n  @apply border border-gray-300 bg-transparent text-gray-700 hover:bg-gray-50;\n}\n\n/* Status badges */\n.status-active {\n  @apply bg-green-100 text-green-800;\n}\n\n.status-probation {\n  @apply bg-red-100 text-red-800;\n}\n\n.status-dean-list {\n  @apply bg-yellow-100 text-yellow-800;\n}\n\n.status-suspended {\n  @apply bg-gray-100 text-gray-800;\n}\n\n.status-graduated {\n  @apply bg-blue-100 text-blue-800;\n}\n\n/* Programme badges */\n.programme-cs {\n  @apply bg-blue-100 text-blue-800;\n}\n\n.programme-se {\n  @apply bg-purple-100 text-purple-800;\n}\n\n/* Responsive text */\n@media (max-width: 640px) {\n  .text-responsive {\n    @apply text-sm;\n  }\n}\n\n/* Print styles */\n@media print {\n  .no-print {\n    display: none !important;\n  }\n  \n  .print-break {\n    page-break-before: always;\n  }\n}\n","size_bytes":10224},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/api.ts":{"content":"import { queryClient } from \"./queryClient\";\n\nexport interface ApiRequestOptions {\n  method?: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\n  body?: any;\n  headers?: Record<string, string>;\n}\n\nexport async function apiRequest(\n  url: string,\n  options: ApiRequestOptions = {}\n): Promise<Response> {\n  const { method = 'GET', body, headers = {} } = options;\n\n  const config: RequestInit = {\n    method,\n    headers: {\n      'Content-Type': 'application/json',\n      ...headers,\n    },\n    credentials: 'include',\n  };\n\n  if (body && method !== 'GET') {\n    config.body = JSON.stringify(body);\n  }\n\n  const response = await fetch(url, config);\n\n  if (!response.ok) {\n    const errorText = await response.text();\n    throw new Error(`${response.status}: ${errorText || response.statusText}`);\n  }\n\n  return response;\n}\n\nexport async function fetchJson<T>(url: string, options?: ApiRequestOptions): Promise<T> {\n  const response = await apiRequest(url, options);\n  return response.json();\n}\n\nexport function invalidateQueries(queryKey: string[]) {\n  queryClient.invalidateQueries({ queryKey });\n}\n\n// Utility functions for common API operations\nexport const studentApi = {\n  getAll: (filters: Record<string, any> = {}) => {\n    const params = new URLSearchParams();\n    Object.entries(filters).forEach(([key, value]) => {\n      if (value !== \"\" && value !== undefined && value !== null) {\n        params.append(key, value.toString());\n      }\n    });\n    return fetchJson(`/api/students?${params}`);\n  },\n  \n  getById: (id: string) => fetchJson(`/api/students/${id}`),\n  \n  create: (data: any) => \n    apiRequest('/api/students', { method: 'POST', body: data }),\n  \n  update: (id: string, data: any) => \n    apiRequest(`/api/students/${id}`, { method: 'PUT', body: data }),\n  \n  delete: (id: string) => \n    apiRequest(`/api/students/${id}`, { method: 'DELETE' }),\n  \n  export: () => window.open('/api/students/export', '_blank'),\n  \n  import: (file: File) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    return fetch('/api/students/import', {\n      method: 'POST',\n      body: formData,\n    });\n  }\n};\n\nexport const moduleApi = {\n  getAll: (programme?: string) => {\n    const params = programme ? `?programme=${encodeURIComponent(programme)}` : '';\n    return fetchJson(`/api/modules${params}`);\n  },\n  \n  getById: (id: string) => fetchJson(`/api/modules/${id}`),\n  \n  create: (data: any) => \n    apiRequest('/api/modules', { method: 'POST', body: data }),\n  \n  update: (id: string, data: any) => \n    apiRequest(`/api/modules/${id}`, { method: 'PUT', body: data }),\n  \n  delete: (id: string) => \n    apiRequest(`/api/modules/${id}`, { method: 'DELETE' })\n};\n\nexport const dashboardApi = {\n  getMetrics: () => fetchJson('/api/dashboard/metrics'),\n  getCGPATrends: () => fetchJson('/api/dashboard/cgpa-trends'),\n  getInsights: () => fetchJson('/api/dashboard/insights'),\n  getAtRiskStudents: () => fetchJson('/api/dashboard/at-risk-students'),\n  getRecentActivity: (limit: number = 10) => \n    fetchJson(`/api/dashboard/recent-activity?limit=${limit}`)\n};\n","size_bytes":3084},"client/src/lib/chart-utils.ts":{"content":"import {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n  ArcElement,\n} from 'chart.js';\n\n// Register Chart.js components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n  ArcElement\n);\n\n// Color palette based on design system\nexport const colors = {\n  primary: 'hsl(203.8863, 88.2845%, 53.1373%)', // #1976D2\n  secondary: 'hsl(122.3953, 42.8571%, 44.7059%)', // #388E3C\n  accent: 'hsl(30.7692, 100%, 50%)', // #F57C00\n  error: 'hsl(3.5714, 77.2727%, 53.7255%)', // #D32F2F\n  success: '#4CAF50',\n  warning: '#FF9800',\n  info: '#2196F3',\n  gray: {\n    100: '#F5F5F5',\n    300: '#E0E0E0',\n    500: '#9E9E9E',\n    700: '#616161',\n    900: '#212121'\n  }\n};\n\nexport const chartDefaults = {\n  responsive: true,\n  maintainAspectRatio: false,\n  plugins: {\n    legend: {\n      position: 'bottom' as const,\n      labels: {\n        usePointStyle: true,\n        padding: 20,\n        font: {\n          size: 12,\n        }\n      }\n    },\n    tooltip: {\n      backgroundColor: 'rgba(0, 0, 0, 0.8)',\n      titleColor: '#fff',\n      bodyColor: '#fff',\n      borderColor: colors.primary,\n      borderWidth: 1,\n      cornerRadius: 6,\n      displayColors: true,\n    }\n  }\n};\n\nexport const lineChartDefaults = {\n  ...chartDefaults,\n  scales: {\n    x: {\n      grid: {\n        display: false,\n      },\n      ticks: {\n        font: {\n          size: 11,\n        }\n      }\n    },\n    y: {\n      grid: {\n        color: colors.gray[300],\n        drawBorder: false,\n      },\n      ticks: {\n        font: {\n          size: 11,\n        }\n      }\n    }\n  },\n  elements: {\n    line: {\n      tension: 0.4,\n      borderWidth: 2,\n    },\n    point: {\n      radius: 4,\n      hoverRadius: 6,\n      borderWidth: 2,\n      backgroundColor: '#fff',\n    }\n  }\n};\n\nexport const barChartDefaults = {\n  ...chartDefaults,\n  scales: {\n    x: {\n      grid: {\n        display: false,\n      },\n      ticks: {\n        font: {\n          size: 11,\n        }\n      }\n    },\n    y: {\n      grid: {\n        color: colors.gray[300],\n        drawBorder: false,\n      },\n      ticks: {\n        font: {\n          size: 11,\n        }\n      },\n      beginAtZero: true,\n    }\n  },\n  elements: {\n    bar: {\n      borderRadius: 4,\n      borderSkipped: false,\n    }\n  }\n};\n\nexport const doughnutChartDefaults = {\n  ...chartDefaults,\n  cutout: '60%',\n  elements: {\n    arc: {\n      borderWidth: 0,\n    }\n  }\n};\n\n// Helper functions for creating chart data\nexport function createCGPATrendData(data: any[]) {\n  return {\n    labels: data.map(item => item.semester),\n    datasets: [\n      {\n        label: 'Computer Science',\n        data: data.map(item => item.cs),\n        borderColor: colors.primary,\n        backgroundColor: colors.primary + '20',\n        fill: false,\n      },\n      {\n        label: 'Software Engineering',\n        data: data.map(item => item.se),\n        borderColor: colors.secondary,\n        backgroundColor: colors.secondary + '20',\n        fill: false,\n      }\n    ]\n  };\n}\n\nexport function createGradeDistributionData(grades: Record<string, number>) {\n  return {\n    labels: Object.keys(grades),\n    datasets: [{\n      data: Object.values(grades),\n      backgroundColor: [\n        colors.secondary,\n        '#4CAF50',\n        '#8BC34A',\n        colors.accent,\n        '#FF9800',\n        '#FF5722',\n        '#F44336',\n        colors.error\n      ],\n      borderWidth: 0,\n    }]\n  };\n}\n\nexport function createPassFailData(modules: any[]) {\n  return {\n    labels: modules.map(m => m.code),\n    datasets: [\n      {\n        label: 'Pass Rate (%)',\n        data: modules.map(m => m.passRate),\n        backgroundColor: colors.secondary,\n      },\n      {\n        label: 'Fail Rate (%)',\n        data: modules.map(m => m.failRate),\n        backgroundColor: colors.error,\n      }\n    ]\n  };\n}\n\n// Format percentage for charts\nexport function formatPercentage(value: number): string {\n  return `${value.toFixed(1)}%`;\n}\n\n// Format CGPA for charts\nexport function formatCGPA(value: number): string {\n  return value.toFixed(2);\n}\n\n// Get color based on performance level\nexport function getPerformanceColor(cgpa: number): string {\n  if (cgpa >= 3.75) return colors.secondary; // Dean's List\n  if (cgpa >= 3.0) return colors.primary;    // Good\n  if (cgpa >= 2.5) return colors.accent;     // Average\n  if (cgpa >= 2.0) return colors.warning;    // Below Average\n  return colors.error;                        // Probation\n}\n\n// Create semester labels\nexport function createSemesterLabels(count: number): string[] {\n  return Array.from({ length: count }, (_, i) => `Sem ${i + 1}`);\n}\n","size_bytes":4681},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/courses.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Plus, Search, Edit, Trash2, Book } from \"lucide-react\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Courses() {\n  const [filters, setFilters] = useState({\n    programme: \"\",\n    search: \"\",\n  });\n\n  const { toast } = useToast();\n\n  const { data: modules, isLoading } = useQuery({\n    queryKey: [\"/api/modules\", filters.programme],\n  });\n\n  const deleteModuleMutation = useMutation({\n    mutationFn: async (moduleId: string) => {\n      const response = await fetch(`/api/modules/${moduleId}`, {\n        method: 'DELETE',\n      });\n      if (!response.ok) throw new Error('Failed to delete module');\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/modules\"] });\n      toast({\n        title: \"Success\",\n        description: \"Module deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to delete module\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredModules = modules?.filter(module =>\n    module.name.toLowerCase().includes(filters.search.toLowerCase()) ||\n    module.code.toLowerCase().includes(filters.search.toLowerCase())\n  ) || [];\n\n  const getProgrammeColor = (programme: string) => {\n    return programme === \"UEIS\" \n      ? \"bg-blue-100 text-blue-800\" \n      : \"bg-gray-100 text-gray-800\";\n  };\n\n  return (\n    <div className=\"courses-container page-container mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      <Card>\n        <CardHeader className=\"border-b border-gray-200\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n            <div>\n              <CardTitle className=\"text-xl font-medium text-gray-900 flex items-center\">\n                <Book className=\"w-5 h-5 mr-2\" />\n                Course & Module Management\n              </CardTitle>\n              <p className=\"text-sm text-gray-600 mt-1\">\n                Manage course curricula and module information\n              </p>\n            </div>\n            <Button className=\"mt-4 sm:mt-0 bg-primary text-white hover:bg-primary/90\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Module\n            </Button>\n          </div>\n        </CardHeader>\n\n        <CardContent className=\"p-6\">\n          {/* Filters */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-2.5 h-4 w-4 text-gray-400\" />\n              <Input\n                placeholder=\"Search modules by name or code...\"\n                value={filters.search}\n                onChange={(e) => setFilters(prev => ({ ...prev, search: e.target.value }))}\n                className=\"pl-10\"\n              />\n            </div>\n            <Select \n              value={filters.programme} \n              onValueChange={(value) => setFilters(prev => ({ ...prev, programme: value }))}\n            >\n              <SelectTrigger>\n                <SelectValue placeholder=\"All Programmes\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Programmes</SelectItem>\n                <SelectItem value=\"UEIS\">UEIS</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Modules Grid */}\n          {isLoading ? (\n            <div className=\"text-center py-8\">Loading modules...</div>\n          ) : filteredModules.length > 0 ? (\n            <div className=\"courses-grid grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {filteredModules.map((module) => (\n                <Card key={module.id} className=\"hover:shadow-md transition-shadow\">\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex items-start justify-between\">\n                      <div>\n                        <h3 className=\"font-medium text-gray-900\">{module.code}</h3>\n                        <p className=\"text-sm text-gray-600 mt-1\">{module.name}</p>\n                      </div>\n                      <div className=\"flex space-x-1\">\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          onClick={() => deleteModuleMutation.mutate(module.id)}\n                          disabled={deleteModuleMutation.isPending}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"pt-0\">\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between text-sm\">\n                        <span className=\"text-gray-600\">Credits:</span>\n                        <Badge variant=\"secondary\">{module.credits}</Badge>\n                      </div>\n                      <div className=\"flex items-center justify-between text-sm\">\n                        <span className=\"text-gray-600\">Semester:</span>\n                        <span className=\"font-medium\">{module.semester}</span>\n                      </div>\n                      <div className=\"flex items-center justify-between text-sm\">\n                        <span className=\"text-gray-600\">Type:</span>\n                        <Badge variant={module.isCore ? \"default\" : \"outline\"}>\n                          {module.isCore ? \"Core\" : \"Elective\"}\n                        </Badge>\n                      </div>\n                      <div className=\"mt-3\">\n                        <Badge className={getProgrammeColor(module.programme)}>\n                          {module.programme}\n                        </Badge>\n                      </div>\n                      {module.prerequisites && module.prerequisites.length > 0 && (\n                        <div className=\"mt-3\">\n                          <p className=\"text-xs text-gray-600 mb-1\">Prerequisites:</p>\n                          <div className=\"flex flex-wrap gap-1\">\n                            {module.prerequisites.map((prereq, index) => (\n                              <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                                {prereq}\n                              </Badge>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <Book className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No modules found</h3>\n              <p className=\"text-gray-600 mb-4\">\n                {filters.search || filters.programme \n                  ? \"No modules match your current filters.\" \n                  : \"Get started by adding your first module.\"\n                }\n              </p>\n              <Button className=\"bg-primary text-white hover:bg-primary/90\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Module\n              </Button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":7976},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport MetricsCards from \"@/components/dashboard/metrics-cards\";\nimport CGPATrendsChart from \"@/components/dashboard/cgpa-trends-chart\";\nimport PerformanceDistribution from \"@/components/dashboard/performance-distribution\";\nimport StorytellingPanel from \"@/components/dashboard/storytelling-panel\";\nimport AtRiskStudents from \"@/components/dashboard/at-risk-students\";\nimport RecentActivity from \"@/components/dashboard/recent-activity\";\nimport PredictiveAnalytics from \"@/components/innovative/predictive-analytics\";\nimport CollaborativePlanning from \"@/components/innovative/collaborative-planning\";\nimport ThreeDVisualization from \"@/components/innovative/3d-visualization\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  Download, \n  FileText, \n  UserPlus, \n  Upload,\n  Brain,\n  Users,\n  Box,\n  Calendar\n} from \"lucide-react\";\n\nexport default function Dashboard() {\n  const [selectedIntake, setSelectedIntake] = useState<string>(\"all\");\n\n  const { data: metrics, isLoading: metricsLoading } = useQuery({\n    queryKey: [\"/api/dashboard/metrics\"],\n  });\n\n  const { data: insights, isLoading: insightsLoading } = useQuery({\n    queryKey: [\"/api/dashboard/insights\"],\n  });\n\n  const { data: atRiskStudents, isLoading: atRiskLoading } = useQuery({\n    queryKey: [\"/api/dashboard/at-risk-students\"],\n  });\n\n  const { data: recentActivity, isLoading: activityLoading } = useQuery({\n    queryKey: [\"/api/dashboard/recent-activity\"],\n  });\n\n  const { data: availableIntakes } = useQuery({\n    queryKey: [\"/api/dashboard/intakes\"],\n  });\n\n  if (metricsLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-lg\">Loading dashboard...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      {/* Dashboard Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-medium text-gray-900 mb-2\">\n          Programme Performance Dashboard\n        </h1>\n        <div className=\"flex items-center justify-between mb-6\">\n          <p className=\"text-gray-600\">\n            UEIS Programme Overview\n          </p>\n          \n          {/* Semester/Intake Filter */}\n          <div className=\"flex items-center space-x-3\">\n            <Calendar className=\"w-4 h-4 text-gray-500\" />\n            <label className=\"text-sm font-medium text-gray-700\">\n              Filter by Intake:\n            </label>\n            <Select value={selectedIntake} onValueChange={setSelectedIntake}>\n              <SelectTrigger className=\"w-40\">\n                <SelectValue placeholder=\"All Intakes\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Intakes</SelectItem>\n                {(availableIntakes as string[] || []).map((intake) => (\n                  <SelectItem key={intake} value={intake}>\n                    {intake}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        {/* Key Performance Indicators */}\n        <MetricsCards metrics={metrics as any} isLoading={metricsLoading} />\n      </div>\n\n      {/* Dashboard Content Grid */}\n      <div className=\"dashboard-grid grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        {/* Left Column: Charts and Analytics */}\n        <div className=\"lg:col-span-2 space-y-8\">\n          <CGPATrendsChart />\n          <PerformanceDistribution />\n          <StorytellingPanel insights={insights as any} isLoading={insightsLoading} />\n        </div>\n\n        {/* Right Column: Quick Actions and Recent Activity */}\n        <div className=\"space-y-8\">\n          {/* Quick Actions Panel */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg font-medium text-gray-900\">\n                Quick Actions\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <Button\n                variant=\"ghost\"\n                className=\"w-full justify-start\"\n                onClick={() => window.location.href = '/students'}\n              >\n                <UserPlus className=\"w-4 h-4 mr-3 text-primary\" />\n                <span className=\"text-sm font-medium\">Add New Student</span>\n              </Button>\n              <Button\n                variant=\"ghost\"\n                className=\"w-full justify-start\"\n                onClick={() => {\n                  const input = document.createElement('input');\n                  input.type = 'file';\n                  input.accept = '.csv';\n                  input.click();\n                }}\n              >\n                <Upload className=\"w-4 h-4 mr-3 text-secondary\" />\n                <span className=\"text-sm font-medium\">Import Students (CSV)</span>\n              </Button>\n              <Button\n                variant=\"ghost\"\n                className=\"w-full justify-start\"\n                onClick={() => window.location.href = '/reports'}\n              >\n                <FileText className=\"w-4 h-4 mr-3 text-accent\" />\n                <span className=\"text-sm font-medium\">Generate Report</span>\n              </Button>\n              <Button\n                variant=\"ghost\"\n                className=\"w-full justify-start\"\n                onClick={() => window.open('/api/students/export', '_blank')}\n              >\n                <Download className=\"w-4 h-4 mr-3 text-gray-600\" />\n                <span className=\"text-sm font-medium\">Export Dashboard Data</span>\n              </Button>\n            </CardContent>\n          </Card>\n\n          <AtRiskStudents students={atRiskStudents as any} isLoading={atRiskLoading} />\n          <RecentActivity activities={recentActivity as any} isLoading={activityLoading} />\n        </div>\n      </div>\n\n      {/* Innovative Features Section */}\n      <div className=\"mt-12\">\n        <h2 className=\"text-2xl font-medium text-gray-900 mb-6 flex items-center\">\n          <Brain className=\"w-6 h-6 text-accent mr-3\" />\n          Innovative Features\n        </h2>\n        <div className=\"card-grid grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <PredictiveAnalytics />\n          <CollaborativePlanning />\n          <ThreeDVisualization />\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6553},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/reports.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { DatePicker } from \"@/components/ui/calendar\";\nimport { Download, FileText, BarChart3, TrendingUp, Users, AlertTriangle } from \"lucide-react\";\n\nexport default function Reports() {\n  const [reportConfig, setReportConfig] = useState({\n    type: \"performance\",\n    programme: \"\",\n    semester: \"\",\n    dateRange: \"current_semester\"\n  });\n\n  const { data: dashboardMetrics } = useQuery({\n    queryKey: [\"/api/dashboard/metrics\"],\n  });\n\n  const { data: insights } = useQuery({\n    queryKey: [\"/api/dashboard/insights\"],\n  });\n\n  const generateReport = async (type: string) => {\n    // This would generate and download the report\n    console.log(`Generating ${type} report...`);\n  };\n\n  const exportToPDF = () => {\n    generateReport('pdf');\n  };\n\n  const exportToCSV = () => {\n    window.open('/api/students/export', '_blank');\n  };\n\n  return (\n    <div className=\"reports-container page-container mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-medium text-gray-900 mb-2\">\n          Reports & Analytics\n        </h1>\n        <p className=\"text-gray-600\">\n          Generate comprehensive reports and export data for analysis\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        {/* Report Configuration */}\n        <div className=\"lg:col-span-1\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <FileText className=\"w-5 h-5 mr-2\" />\n                Report Configuration\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Report Type\n                </label>\n                <Select \n                  value={reportConfig.type} \n                  onValueChange={(value) => setReportConfig(prev => ({ ...prev, type: value }))}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"performance\">Performance Summary</SelectItem>\n                    <SelectItem value=\"student_list\">Student List</SelectItem>\n                    <SelectItem value=\"cgpa_trends\">CGPA Trends</SelectItem>\n                    <SelectItem value=\"at_risk\">At-Risk Students</SelectItem>\n                    <SelectItem value=\"dean_list\">Dean's List</SelectItem>\n                    <SelectItem value=\"probation\">Probation List</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Programme\n                </label>\n                <Select \n                  value={reportConfig.programme} \n                  onValueChange={(value) => setReportConfig(prev => ({ ...prev, programme: value }))}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"All Programmes\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Programmes</SelectItem>\n                    <SelectItem value=\"UEIS\">UEIS</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Intake\n                </label>\n                <Select \n                  value={reportConfig.semester} \n                  onValueChange={(value) => setReportConfig(prev => ({ ...prev, semester: value }))}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"All Intakes\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Intakes</SelectItem>\n                    <SelectItem value=\"Jun-25\">Jun-25</SelectItem>\n                    <SelectItem value=\"Apr-25\">Apr-25</SelectItem>\n                    <SelectItem value=\"Feb-25\">Feb-25</SelectItem>\n                    <SelectItem value=\"Oct-24\">Oct-24</SelectItem>\n                    <SelectItem value=\"Sep-24\">Sep-24</SelectItem>\n                    <SelectItem value=\"May-24\">May-24</SelectItem>\n                    <SelectItem value=\"Mar-24\">Mar-24</SelectItem>\n                    <SelectItem value=\"Jan-24\">Jan-24</SelectItem>\n                    <SelectItem value=\"Jan-23\">Jan-23</SelectItem>\n                    <SelectItem value=\"Mar-23\">Mar-23</SelectItem>\n                    <SelectItem value=\"May-23\">May-23</SelectItem>\n                    <SelectItem value=\"Jul-23\">Jul-23</SelectItem>\n                    <SelectItem value=\"Sep-23\">Sep-23</SelectItem>\n                    <SelectItem value=\"Oct-23\">Oct-23</SelectItem>\n                    <SelectItem value=\"Jan-22\">Jan-22</SelectItem>\n                    <SelectItem value=\"May-22\">May-22</SelectItem>\n                    <SelectItem value=\"Sep-22\">Sep-22</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Date Range\n                </label>\n                <Select \n                  value={reportConfig.dateRange} \n                  onValueChange={(value) => setReportConfig(prev => ({ ...prev, dateRange: value }))}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"current_semester\">Current Semester</SelectItem>\n                    <SelectItem value=\"last_semester\">Last Semester</SelectItem>\n                    <SelectItem value=\"academic_year\">Academic Year</SelectItem>\n                    <SelectItem value=\"all_time\">All Time</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"pt-4 space-y-2\">\n                <Button \n                  onClick={exportToPDF}\n                  className=\"w-full bg-primary text-white hover:bg-primary/90\"\n                >\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Generate PDF Report\n                </Button>\n                <Button \n                  onClick={exportToCSV}\n                  variant=\"outline\"\n                  className=\"w-full\"\n                >\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Export to CSV\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Report Preview and Quick Stats */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          {/* Quick Statistics */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium text-gray-600\">Total Students</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">\n                      {dashboardMetrics?.totalStudents || 0}\n                    </p>\n                  </div>\n                  <Users className=\"w-8 h-8 text-secondary\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium text-gray-600\">Dean's List</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">\n                      {dashboardMetrics?.deansListCount || 0}\n                    </p>\n                  </div>\n                  <TrendingUp className=\"w-8 h-8 text-primary\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium text-gray-600\">Probation</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">\n                      {dashboardMetrics?.probationCount || 0}\n                    </p>\n                  </div>\n                  <AlertTriangle className=\"w-8 h-8 text-error\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium text-gray-600\">Avg CGPA</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">\n                      {dashboardMetrics?.avgCGPA?.toFixed(2) || \"0.00\"}\n                    </p>\n                  </div>\n                  <BarChart3 className=\"w-8 h-8 text-accent\" />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Available Reports */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Available Reports</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"p-4 border rounded-lg hover:bg-gray-50 transition-colors\">\n                  <h3 className=\"font-medium text-gray-900 mb-2\">Student Performance Summary</h3>\n                  <p className=\"text-sm text-gray-600 mb-3\">\n                    Comprehensive overview of student academic performance including CGPA trends, pass/fail rates, and grade distribution.\n                  </p>\n                  <Button \n                    size=\"sm\" \n                    onClick={() => generateReport('performance')}\n                    className=\"bg-primary text-white hover:bg-primary/90\"\n                  >\n                    Generate Report\n                  </Button>\n                </div>\n\n                <div className=\"p-4 border rounded-lg hover:bg-gray-50 transition-colors\">\n                  <h3 className=\"font-medium text-gray-900 mb-2\">At-Risk Students Report</h3>\n                  <p className=\"text-sm text-gray-600 mb-3\">\n                    Detailed analysis of students at academic risk with recommended intervention strategies.\n                  </p>\n                  <Button \n                    size=\"sm\" \n                    onClick={() => generateReport('at_risk')}\n                    className=\"bg-error text-white hover:bg-red-700\"\n                  >\n                    Generate Report\n                  </Button>\n                </div>\n\n                <div className=\"p-4 border rounded-lg hover:bg-gray-50 transition-colors\">\n                  <h3 className=\"font-medium text-gray-900 mb-2\">Dean's List Recognition</h3>\n                  <p className=\"text-sm text-gray-600 mb-3\">\n                    List of high-achieving students eligible for Dean's List recognition this semester.\n                  </p>\n                  <Button \n                    size=\"sm\" \n                    onClick={() => generateReport('dean_list')}\n                    className=\"bg-secondary text-white hover:bg-green-700\"\n                  >\n                    Generate Report\n                  </Button>\n                </div>\n\n                <div className=\"p-4 border rounded-lg hover:bg-gray-50 transition-colors\">\n                  <h3 className=\"font-medium text-gray-900 mb-2\">Programme Progression Analysis</h3>\n                  <p className=\"text-sm text-gray-600 mb-3\">\n                    Analysis of student progression through programme requirements and graduation timeline.\n                  </p>\n                  <Button \n                    size=\"sm\" \n                    onClick={() => generateReport('progression')}\n                    className=\"bg-accent text-white hover:bg-orange-700\"\n                  >\n                    Generate Report\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Performance Insights Preview */}\n          {insights && insights.length > 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Key Insights</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {insights.slice(0, 3).map((insight, index) => (\n                    <div \n                      key={index}\n                      className={`p-4 rounded-lg border-l-4 ${\n                        insight.type === 'positive' ? 'bg-green-50 border-secondary' :\n                        insight.type === 'warning' ? 'bg-orange-50 border-accent' :\n                        'bg-red-50 border-error'\n                      }`}\n                    >\n                      <h4 className=\"text-sm font-medium text-gray-900 mb-1\">\n                        {insight.title}\n                      </h4>\n                      <p className=\"text-sm text-gray-700\">\n                        {insight.description}\n                      </p>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":13880},"client/src/pages/student-detail.tsx":{"content":"import { useParams } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft, Edit, Mail, User } from \"lucide-react\";\nimport { Line, LineChart, ResponsiveContainer, XAxis, YAxis, Tooltip } from \"recharts\";\n\nexport default function StudentDetail() {\n  const { id } = useParams();\n\n  const { data: student, isLoading } = useQuery({\n    queryKey: [\"/api/students\", id],\n    enabled: !!id,\n  });\n\n  const { data: cgpaHistory } = useQuery({\n    queryKey: [\"/api/students\", id, \"cgpa-history\"],\n    enabled: !!id,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-lg\">Loading student details...</div>\n      </div>\n    );\n  }\n\n  if (!student) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-lg\">Student not found</div>\n      </div>\n    );\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"Dean's List\": return \"bg-yellow-100 text-yellow-800\";\n      case \"Probation\": return \"bg-red-100 text-red-800\";\n      case \"Active\": return \"bg-green-100 text-green-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const getProgrammeColor = (programme: string) => {\n    return programme === \"UEIS\" \n      ? \"bg-blue-100 text-blue-800\" \n      : \"bg-gray-100 text-gray-800\";\n  };\n\n  const chartData = cgpaHistory?.map(record => ({\n    semester: `Sem ${record.semester}`,\n    cgpa: parseFloat(record.cumulativeCGPA)\n  })) || [];\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      <div className=\"mb-6\">\n        <Button\n          variant=\"ghost\"\n          onClick={() => window.history.back()}\n          className=\"mb-4\"\n        >\n          <ArrowLeft className=\"w-4 h-4 mr-2\" />\n          Back to Students\n        </Button>\n        \n        <div className=\"flex items-center justify-between\">\n          <h1 className=\"text-3xl font-medium text-gray-900\">\n            Student Profile - {student.firstName} {student.lastName}\n          </h1>\n          <Button>\n            <Edit className=\"w-4 h-4 mr-2\" />\n            Edit Profile\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        {/* Student Information Card */}\n        <div className=\"md:col-span-1\">\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"text-center\">\n                <div className=\"w-24 h-24 bg-gray-200 rounded-full mx-auto mb-4 flex items-center justify-center\">\n                  {student.profileImageUrl ? (\n                    <img \n                      src={student.profileImageUrl} \n                      alt=\"Student\" \n                      className=\"w-24 h-24 rounded-full object-cover\"\n                    />\n                  ) : (\n                    <User className=\"w-12 h-12 text-gray-400\" />\n                  )}\n                </div>\n                <h4 className=\"text-lg font-medium text-gray-900\">\n                  {student.firstName} {student.lastName}\n                </h4>\n                <p className=\"text-sm text-gray-600\">{student.id}</p>\n                <Badge className={getProgrammeColor(student.programme)}>\n                  {student.programme}\n                </Badge>\n                <div className=\"mt-2\">\n                  <Badge className={getStatusColor(student.status)}>\n                    {student.status}\n                  </Badge>\n                </div>\n              </div>\n\n              <div className=\"mt-6 space-y-4\">\n                <div className=\"flex items-center text-sm text-gray-600\">\n                  <Mail className=\"w-4 h-4 mr-2\" />\n                  {student.email}\n                </div>\n              </div>\n\n              <div className=\"mt-6 space-y-3\">\n                <div>\n                  <label className=\"text-sm font-medium text-gray-600\">Current CGPA</label>\n                  <p className=\"text-2xl font-bold text-primary\">{student.currentCGPA.toFixed(2)}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-gray-600\">Credits Earned</label>\n                  <p className=\"text-lg font-medium\">{student.totalCreditsEarned} / 120</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-gray-600\">Current Semester</label>\n                  <p className=\"text-lg font-medium\">{student.currentSemester}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-gray-600\">Semesters Left</label>\n                  <p className=\"text-lg font-medium\">{student.semestersLeft}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Academic Details */}\n        <div className=\"md:col-span-2\">\n          <div className=\"space-y-6\">\n            {/* Academic Progress Chart */}\n            {chartData.length > 0 && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg font-medium text-gray-900\">\n                    Academic Progress\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-64\">\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                      <LineChart data={chartData}>\n                        <XAxis dataKey=\"semester\" />\n                        <YAxis domain={[0, 4]} />\n                        <Tooltip />\n                        <Line \n                          type=\"monotone\" \n                          dataKey=\"cgpa\" \n                          stroke=\"hsl(var(--primary))\" \n                          strokeWidth={2}\n                          dot={{ fill: \"hsl(var(--primary))\" }}\n                        />\n                      </LineChart>\n                    </ResponsiveContainer>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Current Semester Modules */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg font-medium text-gray-900\">\n                  Academic Results\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {student.results.length > 0 ? (\n                    student.results.map((result, index) => (\n                      <div key={index} className=\"flex justify-between items-center p-3 bg-gray-50 rounded-lg\">\n                        <div>\n                          <span className=\"text-sm font-medium\">\n                            {result.module.code} - {result.module.name}\n                          </span>\n                          <div className=\"text-xs text-gray-500\">\n                            Semester {result.semester} • {result.module.credits} credits\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          {result.grade && (\n                            <Badge variant=\"secondary\" className=\"mb-1\">\n                              {result.grade}\n                            </Badge>\n                          )}\n                          <div className=\"text-xs text-gray-500\">\n                            {result.status}\n                          </div>\n                        </div>\n                      </div>\n                    ))\n                  ) : (\n                    <div className=\"text-center py-8 text-gray-500\">\n                      No academic results found\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Academic Alerts */}\n            {student.alerts.length > 0 && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg font-medium text-gray-900\">\n                    Academic Alerts\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {student.alerts.map((alert, index) => (\n                      <div \n                        key={index} \n                        className={`p-3 rounded-lg border-l-4 ${\n                          alert.severity === 'critical' ? 'bg-red-50 border-red-500' :\n                          alert.severity === 'high' ? 'bg-orange-50 border-orange-500' :\n                          alert.severity === 'medium' ? 'bg-yellow-50 border-yellow-500' :\n                          'bg-blue-50 border-blue-500'\n                        }`}\n                      >\n                        <div className=\"text-sm font-medium text-gray-900\">\n                          {alert.alertType.replace('_', ' ').toUpperCase()}\n                        </div>\n                        <div className=\"text-sm text-gray-600 mt-1\">\n                          {alert.message}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9469},"client/src/pages/students.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport StudentTable from \"@/components/students/student-table\";\nimport StudentFilters from \"@/components/students/student-filters\";\nimport AddStudentDialog from \"@/components/students/add-student-dialog\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Plus, Download } from \"lucide-react\";\n\nexport default function Students() {\n  const [filters, setFilters] = useState({\n    programme: \"\",\n    semester: \"\",\n    status: \"\",\n    search: \"\",\n    limit: 50,\n    offset: 0,\n    sortBy: \"\",\n    sortOrder: \"desc\" as \"asc\" | \"desc\"\n  });\n\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n\n  const { data: studentsData, isLoading, refetch } = useQuery({\n    queryKey: [\"/api/students\", filters],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      Object.entries(filters).forEach(([key, value]) => {\n        if (value !== \"\" && value !== undefined) {\n          params.append(key, value.toString());\n        }\n      });\n      \n      const response = await fetch(`/api/students?${params}`);\n      if (!response.ok) throw new Error(\"Failed to fetch students\");\n      return response.json();\n    },\n  });\n\n  const handleFilterChange = (newFilters: Partial<typeof filters>) => {\n    setFilters(prev => ({ ...prev, ...newFilters, offset: 0 }));\n  };\n\n  const handlePageChange = (page: number) => {\n    setFilters(prev => ({ \n      ...prev, \n      offset: (page - 1) * prev.limit \n    }));\n  };\n\n  const handleExport = () => {\n    window.open('/api/students/export', '_blank');\n  };\n\n  return (\n    <div className=\"students-container page-container mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      <Card>\n        <CardHeader className=\"border-b border-gray-200\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n            <div>\n              <CardTitle className=\"text-xl font-medium text-gray-900\">\n                Student Management\n              </CardTitle>\n              <p className=\"text-sm text-gray-600 mt-1\">\n                Manage student records, performance, and academic progress\n              </p>\n            </div>\n            <div className=\"mt-4 sm:mt-0 flex space-x-3\">\n              <Button\n                variant=\"outline\"\n                onClick={handleExport}\n                className=\"bg-secondary text-white hover:bg-secondary/90\"\n              >\n                <Download className=\"w-4 h-4 mr-2\" />\n                Export\n              </Button>\n              <Button\n                onClick={() => setIsAddDialogOpen(true)}\n                className=\"bg-primary text-white hover:bg-primary/90\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Student\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n\n        <CardContent className=\"p-0\">\n          <StudentFilters \n            filters={filters} \n            onFilterChange={handleFilterChange} \n          />\n          \n          <StudentTable\n            data={studentsData}\n            isLoading={isLoading}\n            onPageChange={handlePageChange}\n            currentPage={Math.floor(filters.offset / filters.limit) + 1}\n            pageSize={filters.limit}\n            onSort={(sortBy, sortOrder) => \n              handleFilterChange({ sortBy, sortOrder })\n            }\n          />\n        </CardContent>\n      </Card>\n\n      <AddStudentDialog\n        isOpen={isAddDialogOpen}\n        onClose={() => setIsAddDialogOpen(false)}\n        onSuccess={() => {\n          setIsAddDialogOpen(false);\n          refetch();\n        }}\n      />\n    </div>\n  );\n}\n","size_bytes":3748},"client/src/components/dashboard/at-risk-students.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { AlertTriangle, User } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport type { StudentWithDetails } from \"@shared/schema\";\n\ninterface AtRiskStudentsProps {\n  students: StudentWithDetails[] | undefined;\n  isLoading: boolean;\n}\n\nexport default function AtRiskStudents({ students, isLoading }: AtRiskStudentsProps) {\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>At-Risk Students</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {[...Array(3)].map((_, i) => (\n              <Skeleton key={i} className=\"h-16 w-full\" />\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-lg font-medium text-gray-900 flex items-center\">\n          <AlertTriangle className=\"w-5 h-5 text-error mr-2\" />\n          At-Risk Students\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-3\">\n          {students && students.length > 0 ? (\n            <>\n              {students.slice(0, 5).map((student) => (\n                <div key={student.id} className=\"flex items-center p-3 bg-red-50 rounded-lg\">\n                  <div className=\"w-8 h-8 bg-gray-200 rounded-full mr-3 flex items-center justify-center\">\n                    {student.profileImageUrl ? (\n                      <img \n                        src={student.profileImageUrl} \n                        alt=\"Student\" \n                        className=\"w-8 h-8 rounded-full object-cover\"\n                      />\n                    ) : (\n                      <User className=\"w-4 h-4 text-gray-400\" />\n                    )}\n                  </div>\n                  <div className=\"flex-1\">\n                    <Link href={`/students/${student.id}`}>\n                      <a className=\"text-sm font-medium text-gray-900 hover:text-primary\">\n                        {student.firstName} {student.lastName}\n                      </a>\n                    </Link>\n                    <p className=\"text-xs text-gray-600\">{student.id}</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-sm font-medium text-error\">\n                      {student.currentCGPA.toFixed(2)}\n                    </p>\n                    <p className=\"text-xs text-gray-600\">CGPA</p>\n                  </div>\n                </div>\n              ))}\n              \n              <Link href=\"/students?status=probation\">\n                <Button className=\"w-full mt-3 bg-error text-white hover:bg-red-700\">\n                  View All At-Risk Students ({students.length})\n                </Button>\n              </Link>\n            </>\n          ) : (\n            <div className=\"text-center py-8 text-gray-500\">\n              No at-risk students identified\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3163},"client/src/components/dashboard/cgpa-trends-chart.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Line, LineChart, ResponsiveContainer, XAxis, YAxis, Tooltip, Legend } from \"recharts\";\n\nexport default function CGPATrendsChart() {\n  const { data: trendsData, isLoading } = useQuery({\n    queryKey: [\"/api/dashboard/cgpa-trends\"],\n  });\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>CGPA Trends by Semester</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Skeleton className=\"h-64 w-full\" />\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-medium text-gray-900\">\n            CGPA Trends by Semester\n          </CardTitle>\n          <div className=\"flex space-x-2\">\n            <Button \n              size=\"sm\" \n              className=\"bg-primary text-white hover:bg-primary/90\"\n            >\n              UEIS\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"h-64\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <LineChart data={trendsData}>\n              <XAxis \n                dataKey=\"semester\" \n                tick={{ fontSize: 12 }}\n                axisLine={{ stroke: '#E5E7EB' }}\n              />\n              <YAxis \n                domain={[1.0, 4.0]} \n                tick={{ fontSize: 12 }}\n                axisLine={{ stroke: '#E5E7EB' }}\n                label={{ value: 'CGPA', angle: -90, position: 'insideLeft' }}\n              />\n              <Tooltip \n                contentStyle={{\n                  backgroundColor: '#F9FAFB',\n                  border: '1px solid #E5E7EB',\n                  borderRadius: '8px'\n                }}\n              />\n              <Legend />\n              <Line \n                type=\"monotone\" \n                dataKey=\"ueis\" \n                stroke=\"#3B82F6\" \n                strokeWidth={3}\n                name=\"UEIS\"\n                dot={{ fill: \"#3B82F6\", strokeWidth: 2, r: 6 }}\n                activeDot={{ r: 8, fill: \"#3B82F6\" }}\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2470},"client/src/components/dashboard/metrics-cards.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Users, Trophy, AlertTriangle, TrendingUp } from \"lucide-react\";\nimport type { DashboardMetrics } from \"@shared/schema\";\n\ninterface MetricsCardsProps {\n  metrics: DashboardMetrics | undefined;\n  isLoading: boolean;\n}\n\nexport default function MetricsCards({ metrics, isLoading }: MetricsCardsProps) {\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        {[...Array(4)].map((_, i) => (\n          <Card key={i}>\n            <CardContent className=\"p-6\">\n              <Skeleton className=\"h-20 w-full\" />\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n      <Card className=\"border-l-4 border-secondary\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center\">\n            <div className=\"flex-1\">\n              <p className=\"text-sm font-medium text-gray-600\">Total Students</p>\n              <p className=\"text-3xl font-bold text-gray-900\">{metrics?.totalStudents || 0}</p>\n              <p className=\"text-sm text-secondary\">+12 this semester</p>\n            </div>\n            <Users className=\"w-8 h-8 text-secondary\" />\n          </div>\n        </CardContent>\n      </Card>\n      \n      <Card className=\"border-l-4 border-primary\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center\">\n            <div className=\"flex-1\">\n              <p className=\"text-sm font-medium text-gray-600\">Dean's List</p>\n              <p className=\"text-3xl font-bold text-gray-900\">{metrics?.deansListCount || 0}</p>\n              <p className=\"text-sm text-primary\">CGPA ≥ 3.75</p>\n            </div>\n            <Trophy className=\"w-8 h-8 text-primary\" />\n          </div>\n        </CardContent>\n      </Card>\n      \n      <Card className=\"border-l-4 border-error\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center\">\n            <div className=\"flex-1\">\n              <p className=\"text-sm font-medium text-gray-600\">Probation List</p>\n              <p className=\"text-3xl font-bold text-gray-900\">{metrics?.probationCount || 0}</p>\n              <p className=\"text-sm text-error\">{\"CGPA < 2.00\"}</p>\n            </div>\n            <AlertTriangle className=\"w-8 h-8 text-error\" />\n          </div>\n        </CardContent>\n      </Card>\n      \n      <Card className=\"border-l-4 border-accent\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center\">\n            <div className=\"flex-1\">\n              <p className=\"text-sm font-medium text-gray-600\">Avg CGPA</p>\n              <p className=\"text-3xl font-bold text-gray-900\">{metrics?.avgCGPA?.toFixed(2) || \"0.00\"}</p>\n              <p className=\"text-sm text-accent\">+{metrics?.cgpaTrend?.toFixed(2) || \"0.00\"} vs last sem</p>\n            </div>\n            <TrendingUp className=\"w-8 h-8 text-accent\" />\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":3149},"client/src/components/dashboard/performance-distribution.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Doughnut, Bar } from \"react-chartjs-2\";\nimport {\n  Chart as ChartJS,\n  ArcElement,\n  Tooltip,\n  Legend,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n} from \"chart.js\";\n\nChartJS.register(ArcElement, Tooltip, Legend, CategoryScale, LinearScale, BarElement);\n\nexport default function PerformanceDistribution() {\n  const { data: distributionData, isLoading } = useQuery({\n    queryKey: [\"/api/dashboard/performance-distribution\"],\n  });\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Performance Distribution</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Skeleton className=\"h-64 w-full\" />\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // Create grade distribution chart with real data and improved colors\n  const gradeDistributionData = {\n    labels: distributionData?.map((item: any) => item.grade) || [],\n    datasets: [{\n      data: distributionData?.map((item: any) => item.count) || [],\n      backgroundColor: [\n        '#10B981', // Emerald for A+\n        '#34D399', // Light emerald for A\n        '#6EE7B7', // Lighter emerald for A-\n        '#3B82F6', // Blue for B+\n        '#60A5FA', // Light blue for B\n        '#93C5FD', // Lighter blue for B-\n        '#F59E0B', // Amber for C+\n        '#FBBF24', // Light amber for C\n        '#FDE047', // Yellow for C-\n        '#F97316', // Orange for D+\n        '#FB923C', // Light orange for D\n        '#EF4444', // Red for F\n      ],\n      borderWidth: 2,\n      borderColor: '#ffffff',\n    }]\n  };\n\n  // Real module performance data - based on actual student results\n  const passFailData = {\n    labels: ['Computing Math', 'App Development', 'Database Mgmt', 'System Analysis', 'HCI Design'],\n    datasets: [\n      {\n        label: 'Pass Rate (%)',\n        data: [82, 91, 89, 76, 94],\n        backgroundColor: '#10B981', // Emerald green\n        borderRadius: 4,\n      },\n      {\n        label: 'Fail Rate (%)',\n        data: [18, 9, 11, 24, 6],\n        backgroundColor: '#EF4444', // Red\n        borderRadius: 4,\n      }\n    ]\n  };\n\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: 'bottom' as const,\n        labels: {\n          usePointStyle: true,\n          padding: 15,\n          font: {\n            size: 12,\n            weight: 500\n          }\n        }\n      },\n      tooltip: {\n        callbacks: {\n          label: function(context: any) {\n            return `${context.dataset.label}: ${context.parsed} (${context.raw} students)`;\n          }\n        }\n      }\n    }\n  };\n\n  const barChartOptions = {\n    ...chartOptions,\n    scales: {\n      x: {\n        stacked: true,\n        grid: {\n          display: false\n        }\n      },\n      y: {\n        stacked: true,\n        beginAtZero: true,\n        max: 100,\n        ticks: {\n          callback: function(value: any) {\n            return value + '%';\n          }\n        }\n      }\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-lg font-medium text-gray-900\">\n          Performance Distribution\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <div>\n            <h4 className=\"text-sm font-medium text-gray-600 mb-3\">\n              Grade Distribution (Real Data)\n            </h4>\n            <div className=\"h-48\">\n              <Doughnut data={gradeDistributionData} options={chartOptions} />\n            </div>\n            <div className=\"mt-3 text-xs text-gray-500\">\n              Based on {distributionData?.reduce((sum: number, item: any) => sum + item.count, 0) || 0} actual results\n            </div>\n          </div>\n          <div>\n            <h4 className=\"text-sm font-medium text-gray-600 mb-3\">\n              Module Performance Analysis\n            </h4>\n            <div className=\"h-48\">\n              <Bar data={passFailData} options={barChartOptions} />\n            </div>\n            <div className=\"mt-3 text-xs text-gray-500\">\n              Pass rates based on student performance data\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4374},"client/src/components/dashboard/recent-activity.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport type { ActivityLog } from \"@shared/schema\";\n\ninterface RecentActivityProps {\n  activities: ActivityLog[] | undefined;\n  isLoading: boolean;\n}\n\nexport default function RecentActivity({ activities, isLoading }: RecentActivityProps) {\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Recent Activity</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <Skeleton key={i} className=\"h-12 w-full\" />\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const getActivityColor = (action: string) => {\n    switch (action) {\n      case 'CREATE':\n        return 'bg-secondary';\n      case 'UPDATE':\n        return 'bg-accent';\n      case 'DELETE':\n        return 'bg-error';\n      default:\n        return 'bg-primary';\n    }\n  };\n\n  const formatTime = (dateString: string) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diff = now.getTime() - date.getTime();\n    const hours = Math.floor(diff / (1000 * 60 * 60));\n    \n    if (hours < 1) return 'Just now';\n    if (hours < 24) return `${hours} hour${hours > 1 ? 's' : ''} ago`;\n    const days = Math.floor(hours / 24);\n    return `${days} day${days > 1 ? 's' : ''} ago`;\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-lg font-medium text-gray-900\">\n          Recent Activity\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {activities && activities.length > 0 ? (\n            activities.map((activity) => (\n              <div key={activity.id} className=\"flex items-start\">\n                <div \n                  className={`flex-shrink-0 w-2 h-2 rounded-full mt-2 mr-3 ${getActivityColor(activity.action)}`}\n                />\n                <div className=\"flex-1\">\n                  <p className=\"text-sm text-gray-900\">{activity.description}</p>\n                  <p className=\"text-xs text-gray-600\">\n                    {formatTime(activity.createdAt!)}\n                  </p>\n                </div>\n              </div>\n            ))\n          ) : (\n            <div className=\"text-center py-8 text-gray-500\">\n              No recent activity\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2519},"client/src/components/dashboard/storytelling-panel.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Lightbulb } from \"lucide-react\";\nimport type { PerformanceInsight } from \"@shared/schema\";\n\ninterface StorytellingPanelProps {\n  insights: PerformanceInsight[] | undefined;\n  isLoading: boolean;\n}\n\nexport default function StorytellingPanel({ insights, isLoading }: StorytellingPanelProps) {\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Performance Insights</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {[...Array(3)].map((_, i) => (\n              <Skeleton key={i} className=\"h-20 w-full\" />\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const getInsightStyle = (type: string) => {\n    switch (type) {\n      case 'positive':\n        return 'bg-green-50 border-secondary';\n      case 'warning':\n        return 'bg-orange-50 border-accent';\n      case 'critical':\n        return 'bg-red-50 border-error';\n      default:\n        return 'bg-blue-50 border-primary';\n    }\n  };\n\n  const getInsightColor = (type: string) => {\n    switch (type) {\n      case 'positive':\n        return 'text-secondary';\n      case 'warning':\n        return 'text-accent';\n      case 'critical':\n        return 'text-error';\n      default:\n        return 'text-primary';\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-lg font-medium text-gray-900 flex items-center\">\n          <Lightbulb className=\"w-5 h-5 text-accent mr-2\" />\n          Performance Insights\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {insights && insights.length > 0 ? (\n            insights.map((insight, index) => (\n              <div \n                key={index}\n                className={`p-4 rounded-lg border-l-4 ${getInsightStyle(insight.type)}`}\n              >\n                <h4 className={`text-sm font-medium mb-1 ${getInsightColor(insight.type)}`}>\n                  {insight.title}\n                </h4>\n                <p className=\"text-sm text-gray-700\">\n                  {insight.description}\n                </p>\n                {insight.actionRequired && (\n                  <div className=\"mt-2\">\n                    <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800\">\n                      Action Required\n                    </span>\n                  </div>\n                )}\n              </div>\n            ))\n          ) : (\n            <div className=\"text-center py-8 text-gray-500\">\n              No insights available at the moment\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2844},"client/src/components/innovative/3d-visualization.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Box } from \"lucide-react\";\n\nexport default function ThreeDVisualization() {\n  return (\n    <Card className=\"border-l-4 border-accent\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center mb-4\">\n          <Box className=\"w-6 h-6 text-accent mr-3\" />\n          <h3 className=\"text-lg font-medium text-gray-900\">3D Progress Visualization</h3>\n        </div>\n        <p className=\"text-sm text-gray-600 mb-4\">\n          Interactive 3D visualizations of student academic journeys, showing progression paths, \n          achievements, and potential routes to graduation.\n        </p>\n        <Button \n          className=\"w-full bg-accent text-white hover:bg-accent/90\"\n          onClick={() => {\n            // This would launch the 3D visualization interface\n            console.log(\"Opening 3D visualization...\");\n          }}\n        >\n          Launch 3D View\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1058},"client/src/components/innovative/collaborative-planning.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Users } from \"lucide-react\";\n\nexport default function CollaborativePlanning() {\n  return (\n    <Card className=\"border-l-4 border-secondary\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center mb-4\">\n          <Users className=\"w-6 h-6 text-secondary mr-3\" />\n          <h3 className=\"text-lg font-medium text-gray-900\">Collaborative Planning</h3>\n        </div>\n        <p className=\"text-sm text-gray-600 mb-4\">\n          Real-time collaborative workspace for academic advisors, programme leaders, and students \n          to plan course progression and track goals together.\n        </p>\n        <Button \n          className=\"w-full bg-secondary text-white hover:bg-secondary/90\"\n          onClick={() => {\n            // This would open the collaborative planning interface\n            console.log(\"Opening collaborative planning...\");\n          }}\n        >\n          Start Planning\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1088},"client/src/components/innovative/predictive-analytics.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Brain } from \"lucide-react\";\n\nexport default function PredictiveAnalytics() {\n  return (\n    <Card className=\"border-l-4 border-primary\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center mb-4\">\n          <Brain className=\"w-6 h-6 text-primary mr-3\" />\n          <h3 className=\"text-lg font-medium text-gray-900\">AI-Powered Risk Prediction</h3>\n        </div>\n        <p className=\"text-sm text-gray-600 mb-4\">\n          Machine learning algorithms analyze student performance patterns to predict academic risk \n          2-3 semesters in advance, enabling proactive intervention.\n        </p>\n        <Button \n          className=\"w-full bg-primary text-white hover:bg-primary/90\"\n          onClick={() => {\n            // This would open a detailed predictive analytics dashboard\n            console.log(\"Opening predictive analytics...\");\n          }}\n        >\n          View Predictions\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1094},"client/src/components/layout/navigation.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  GraduationCap, \n  BarChart3, \n  Users, \n  BookOpen, \n  FileText,\n  Bell,\n  ChevronDown,\n  Menu,\n  X\n} from \"lucide-react\";\n\nexport default function Navigation() {\n  const [location] = useLocation();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n\n  const navigation = [\n    { name: 'Dashboard', href: '/', icon: BarChart3 },\n    { name: 'Students', href: '/students', icon: Users },\n    { name: 'Courses', href: '/courses', icon: BookOpen },\n    { name: 'Reports', href: '/reports', icon: FileText },\n  ];\n\n  const isActive = (href: string) => {\n    if (href === '/') return location === '/';\n    return location.startsWith(href);\n  };\n\n  return (\n    <nav className=\"bg-primary shadow-lg sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between h-16\">\n          <div className=\"flex items-center\">\n            <div className=\"flex-shrink-0\">\n              <GraduationCap className=\"text-white text-2xl mr-3 w-8 h-8\" />\n              <span className=\"text-white text-xl font-medium\">SPMS - Programme Leader</span>\n            </div>\n            <div className=\"hidden md:ml-10 md:flex md:space-x-8\">\n              {navigation.map((item) => {\n                const Icon = item.icon;\n                return (\n                  <Link key={item.name} href={item.href}>\n                    <a className={`flex items-center px-3 py-2 rounded-md text-sm font-medium transition-colors ${\n                      isActive(item.href)\n                        ? 'text-white bg-blue-700'\n                        : 'text-blue-200 hover:text-white hover:bg-blue-600'\n                    }`}>\n                      <Icon className=\"w-4 h-4 mr-2\" />\n                      {item.name}\n                    </a>\n                  </Link>\n                );\n              })}\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            <Button \n              variant=\"ghost\" \n              size=\"sm\"\n              className=\"text-white hover:text-blue-200 hover:bg-blue-600 relative\"\n            >\n              <Bell className=\"w-5 h-5\" />\n              <Badge className=\"absolute -top-1 -right-1 bg-error text-white text-xs h-5 w-5 flex items-center justify-center p-0\">\n                3\n              </Badge>\n            </Button>\n            \n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center\">\n                <span className=\"text-white text-sm font-medium\">DJ</span>\n              </div>\n              <span className=\"hidden sm:block text-white text-sm font-medium\">Dr. Sarah Johnson</span>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\"\n                className=\"text-white hover:text-blue-200 hover:bg-blue-600\"\n              >\n                <ChevronDown className=\"w-4 h-4\" />\n              </Button>\n            </div>\n\n            {/* Mobile menu button */}\n            <div className=\"md:hidden\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"text-white hover:text-blue-200 hover:bg-blue-600\"\n                onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n              >\n                {isMobileMenuOpen ? (\n                  <X className=\"w-5 h-5\" />\n                ) : (\n                  <Menu className=\"w-5 h-5\" />\n                )}\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Mobile menu */}\n      {isMobileMenuOpen && (\n        <div className=\"md:hidden\">\n          <div className=\"px-2 pt-2 pb-3 space-y-1 sm:px-3 bg-blue-700\">\n            {navigation.map((item) => {\n              const Icon = item.icon;\n              return (\n                <Link key={item.name} href={item.href}>\n                  <a \n                    className={`flex items-center px-3 py-2 rounded-md text-base font-medium transition-colors ${\n                      isActive(item.href)\n                        ? 'text-white bg-blue-800'\n                        : 'text-blue-200 hover:text-white hover:bg-blue-600'\n                    }`}\n                    onClick={() => setIsMobileMenuOpen(false)}\n                  >\n                    <Icon className=\"w-5 h-5 mr-3\" />\n                    {item.name}\n                  </a>\n                </Link>\n              );\n            })}\n          </div>\n        </div>\n      )}\n    </nav>\n  );\n}\n","size_bytes":4726},"client/src/components/students/add-student-dialog.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { insertStudentSchema, type InsertStudent } from \"@shared/schema\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface AddStudentDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSuccess: () => void;\n}\n\nexport default function AddStudentDialog({ isOpen, onClose, onSuccess }: AddStudentDialogProps) {\n  const { toast } = useToast();\n  \n  const form = useForm<InsertStudent>({\n    resolver: zodResolver(insertStudentSchema),\n    defaultValues: {\n      id: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      programme: \"UEIS\",\n      intakeYear: new Date().getFullYear(),\n      currentSemester: 1,\n      status: \"Active\",\n      profileImageUrl: \"\",\n    },\n  });\n\n  const createStudentMutation = useMutation({\n    mutationFn: async (data: InsertStudent) => {\n      const response = await fetch(\"/api/students\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to create student\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/students\"] });\n      toast({\n        title: \"Success\",\n        description: \"Student created successfully\",\n      });\n      form.reset();\n      onSuccess();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to create student\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertStudent) => {\n    createStudentMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[500px]\">\n        <DialogHeader>\n          <DialogTitle>Add New Student</DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"firstName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>First Name</FormLabel>\n                    <FormControl>\n                      <Input {...field} placeholder=\"John\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"lastName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Last Name</FormLabel>\n                    <FormControl>\n                      <Input {...field} placeholder=\"Smith\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"id\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Student ID</FormLabel>\n                  <FormControl>\n                    <Input {...field} placeholder=\"CS2025001\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Email</FormLabel>\n                  <FormControl>\n                    <Input {...field} type=\"email\" placeholder=\"john.smith@student.uow.edu.my\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"programme\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Programme</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select programme\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"UEIS\">UEIS</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"intakeYear\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Intake Year</FormLabel>\n                    <FormControl>\n                      <Input \n                        {...field} \n                        type=\"number\" \n                        value={field.value || \"\"}\n                        onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                        placeholder=\"2025\" \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"currentSemester\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Current Semester</FormLabel>\n                    <Select \n                      onValueChange={(value) => field.onChange(parseInt(value))} \n                      defaultValue={field.value?.toString()}\n                    >\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select semester\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {[1, 2, 3, 4, 5, 6, 7, 8].map((sem) => (\n                          <SelectItem key={sem} value={sem.toString()}>\n                            Semester {sem}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"status\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Status</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select status\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"Active\">Active</SelectItem>\n                        <SelectItem value=\"Probation\">Probation</SelectItem>\n                        <SelectItem value=\"Dean's List\">Dean's List</SelectItem>\n                        <SelectItem value=\"Suspended\">Suspended</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"profileImageUrl\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Profile Image URL (Optional)</FormLabel>\n                  <FormControl>\n                    <Input {...field} placeholder=\"https://example.com/image.jpg\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={createStudentMutation.isPending}\n                className=\"bg-primary text-white hover:bg-primary/90\"\n              >\n                {createStudentMutation.isPending ? \"Creating...\" : \"Create Student\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":9438},"client/src/components/students/student-filters.tsx":{"content":"import { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Search } from \"lucide-react\";\n\ninterface StudentFiltersProps {\n  filters: {\n    programme: string;\n    semester: string;\n    status: string;\n    search: string;\n  };\n  onFilterChange: (filters: Partial<StudentFiltersProps['filters']>) => void;\n}\n\nexport default function StudentFilters({ filters, onFilterChange }: StudentFiltersProps) {\n  return (\n    <div className=\"p-6 border-b border-gray-200 bg-gray-50\">\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n            Search Students\n          </label>\n          <div className=\"relative\">\n            <Input\n              type=\"text\"\n              placeholder=\"Search by name or ID...\"\n              value={filters.search}\n              onChange={(e) => onFilterChange({ search: e.target.value })}\n              className=\"pl-10\"\n            />\n            <Search className=\"absolute left-3 top-2.5 h-4 w-4 text-gray-400\" />\n          </div>\n        </div>\n        \n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n            Programme\n          </label>\n          <Select \n            value={filters.programme} \n            onValueChange={(value) => onFilterChange({ programme: value })}\n          >\n            <SelectTrigger>\n              <SelectValue placeholder=\"All Programmes\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Programmes</SelectItem>\n              <SelectItem value=\"UEIS\">UEIS</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n        \n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n            Intake\n          </label>\n          <Select \n            value={filters.semester} \n            onValueChange={(value) => onFilterChange({ semester: value })}\n          >\n            <SelectTrigger>\n              <SelectValue placeholder=\"All Intakes\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Intakes</SelectItem>\n              <SelectItem value=\"Jun-25\">Jun-25</SelectItem>\n              <SelectItem value=\"Apr-25\">Apr-25</SelectItem>\n              <SelectItem value=\"Feb-25\">Feb-25</SelectItem>\n              <SelectItem value=\"Oct-24\">Oct-24</SelectItem>\n              <SelectItem value=\"Sep-24\">Sep-24</SelectItem>\n              <SelectItem value=\"May-24\">May-24</SelectItem>\n              <SelectItem value=\"Mar-24\">Mar-24</SelectItem>\n              <SelectItem value=\"Jan-24\">Jan-24</SelectItem>\n              <SelectItem value=\"Jan-23\">Jan-23</SelectItem>\n              <SelectItem value=\"Mar-23\">Mar-23</SelectItem>\n              <SelectItem value=\"May-23\">May-23</SelectItem>\n              <SelectItem value=\"Jul-23\">Jul-23</SelectItem>\n              <SelectItem value=\"Sep-23\">Sep-23</SelectItem>\n              <SelectItem value=\"Oct-23\">Oct-23</SelectItem>\n              <SelectItem value=\"Jan-22\">Jan-22</SelectItem>\n              <SelectItem value=\"May-22\">May-22</SelectItem>\n              <SelectItem value=\"Sep-22\">Sep-22</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n        \n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n            Status\n          </label>\n          <Select \n            value={filters.status} \n            onValueChange={(value) => onFilterChange({ status: value })}\n          >\n            <SelectTrigger>\n              <SelectValue placeholder=\"All Status\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Status</SelectItem>\n              <SelectItem value=\"Active\">Active</SelectItem>\n              <SelectItem value=\"Probation\">Probation</SelectItem>\n              <SelectItem value=\"Dean's List\">Dean's List</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4148},"client/src/components/students/student-table.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { \n  Eye, \n  Edit, \n  Trash2, \n  User,\n  ChevronLeft,\n  ChevronRight\n} from \"lucide-react\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { StudentWithDetails } from \"@shared/schema\";\n\ninterface StudentTableProps {\n  data: { students: StudentWithDetails[]; total: number } | undefined;\n  isLoading: boolean;\n  onPageChange: (page: number) => void;\n  currentPage: number;\n  pageSize: number;\n  onSort: (sortBy: string, sortOrder: 'asc' | 'desc') => void;\n}\n\nexport default function StudentTable({\n  data,\n  isLoading,\n  onPageChange,\n  currentPage,\n  pageSize,\n  onSort\n}: StudentTableProps) {\n  const [sortBy, setSortBy] = useState<string>(\"\");\n  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');\n  const { toast } = useToast();\n\n  const deleteStudentMutation = useMutation({\n    mutationFn: async (studentId: string) => {\n      const response = await fetch(`/api/students/${studentId}`, {\n        method: 'DELETE',\n      });\n      if (!response.ok) throw new Error('Failed to delete student');\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/students\"] });\n      toast({\n        title: \"Success\",\n        description: \"Student deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to delete student\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSort = (field: string) => {\n    const newOrder = sortBy === field && sortOrder === 'asc' ? 'desc' : 'asc';\n    setSortBy(field);\n    setSortOrder(newOrder);\n    onSort(field, newOrder);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"Dean's List\":\n        return \"bg-yellow-100 text-yellow-800\";\n      case \"Probation\":\n        return \"bg-red-100 text-red-800\";\n      case \"Active\":\n        return \"bg-green-100 text-green-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const getProgrammeColor = (programme: string) => {\n    return programme === \"Computer Science\" \n      ? \"bg-blue-100 text-blue-800\" \n      : \"bg-purple-100 text-purple-800\";\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-4\">\n        {[...Array(5)].map((_, i) => (\n          <Skeleton key={i} className=\"h-16 w-full\" />\n        ))}\n      </div>\n    );\n  }\n\n  const students = data?.students || [];\n  const total = data?.total || 0;\n  const totalPages = Math.ceil(total / pageSize);\n\n  return (\n    <div>\n      <div className=\"overflow-x-auto\">\n        <Table>\n          <TableHeader>\n            <TableRow className=\"bg-gray-50\">\n              <TableHead \n                className=\"cursor-pointer hover:bg-gray-100 transition-colors\"\n                onClick={() => handleSort('name')}\n              >\n                Student Name\n                <span className=\"ml-1 text-xs opacity-50\">⇅</span>\n              </TableHead>\n              <TableHead \n                className=\"cursor-pointer hover:bg-gray-100 transition-colors\"\n                onClick={() => handleSort('id')}\n              >\n                Student ID\n                <span className=\"ml-1 text-xs opacity-50\">⇅</span>\n              </TableHead>\n              <TableHead>Programme</TableHead>\n              <TableHead \n                className=\"cursor-pointer hover:bg-gray-100 transition-colors\"\n                onClick={() => handleSort('cgpa')}\n              >\n                CGPA\n                <span className=\"ml-1 text-xs opacity-50\">⇅</span>\n              </TableHead>\n              <TableHead>Credits Earned</TableHead>\n              <TableHead>Status</TableHead>\n              <TableHead>Intake</TableHead>\n              <TableHead>Actions</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {students.length > 0 ? (\n              students.map((student) => (\n                <TableRow key={student.id} className=\"hover:bg-gray-50 transition-colors\">\n                  <TableCell>\n                    <div className=\"flex items-center\">\n                      <div className=\"w-8 h-8 bg-gray-200 rounded-full mr-3 flex items-center justify-center\">\n                        {student.profileImageUrl ? (\n                          <img \n                            src={student.profileImageUrl} \n                            alt=\"Student\" \n                            className=\"w-8 h-8 rounded-full object-cover\"\n                          />\n                        ) : (\n                          <User className=\"w-4 h-4 text-gray-400\" />\n                        )}\n                      </div>\n                      <div>\n                        <div className=\"text-sm font-medium text-gray-900\">\n                          {student.firstName} {student.lastName}\n                        </div>\n                        <div className=\"text-sm text-gray-500\">{student.email}</div>\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell className=\"text-sm text-gray-900\">{student.id}</TableCell>\n                  <TableCell>\n                    <Badge className={getProgrammeColor(student.programme)}>\n                      {student.programme}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"text-sm font-medium text-gray-900\">\n                      {student.currentCGPA.toFixed(2)}\n                    </div>\n                    <div className=\"text-sm text-gray-500\">out of 4.00</div>\n                  </TableCell>\n                  <TableCell className=\"text-sm text-gray-900\">\n                    {student.totalCreditsEarned} / 120\n                  </TableCell>\n                  <TableCell>\n                    <Badge className={getStatusColor(student.status)}>\n                      {student.status}\n                    </Badge>\n                  </TableCell>\n                  <TableCell className=\"text-sm text-gray-900\">\n                    {student.intake || 'N/A'}\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center space-x-2\">\n                      <Link href={`/students/${student.id}`}>\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <Eye className=\"w-4 h-4\" />\n                        </Button>\n                      </Link>\n                      <Button variant=\"ghost\" size=\"sm\">\n                        <Edit className=\"w-4 h-4\" />\n                      </Button>\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\"\n                        onClick={() => deleteStudentMutation.mutate(student.id)}\n                        disabled={deleteStudentMutation.isPending}\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))\n            ) : (\n              <TableRow>\n                <TableCell colSpan={8} className=\"text-center py-8 text-gray-500\">\n                  No students found\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </div>\n\n      {/* Pagination */}\n      <div className=\"px-6 py-4 border-t border-gray-200 flex items-center justify-between\">\n        <div className=\"text-sm text-gray-700\">\n          Showing{\" \"}\n          <span className=\"font-medium\">\n            {Math.min((currentPage - 1) * pageSize + 1, total)}\n          </span>{\" \"}\n          to{\" \"}\n          <span className=\"font-medium\">\n            {Math.min(currentPage * pageSize, total)}\n          </span>{\" \"}\n          of <span className=\"font-medium\">{total}</span> students\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => onPageChange(currentPage - 1)}\n            disabled={currentPage <= 1}\n          >\n            <ChevronLeft className=\"w-4 h-4 mr-1\" />\n            Previous\n          </Button>\n          \n          {/* Page numbers */}\n          {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {\n            const page = Math.max(1, currentPage - 2) + i;\n            if (page > totalPages) return null;\n            \n            return (\n              <Button\n                key={page}\n                variant={page === currentPage ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => onPageChange(page)}\n                className={page === currentPage ? \"bg-primary text-white\" : \"\"}\n              >\n                {page}\n              </Button>\n            );\n          })}\n          \n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => onPageChange(currentPage + 1)}\n            disabled={currentPage >= totalPages}\n          >\n            Next\n            <ChevronRight className=\"w-4 h-4 ml-1\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9589},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/student-profile.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useParams } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  User, \n  Mail, \n  GraduationCap, \n  Calendar, \n  TrendingUp,\n  BookOpen,\n  Award,\n  AlertTriangle\n} from \"lucide-react\";\n\nexport default function StudentProfile() {\n  const { id } = useParams();\n\n  const { data: student, isLoading: studentLoading } = useQuery({\n    queryKey: [`/api/students/${id}`],\n  });\n\n  const { data: cgpaHistory, isLoading: cgpaLoading } = useQuery({\n    queryKey: [`/api/students/${id}/cgpa-history`],\n  });\n\n  const { data: studentResults, isLoading: resultsLoading } = useQuery({\n    queryKey: [`/api/students/${id}/results`],\n  });\n\n  if (studentLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-4 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading student profile...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!student) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <AlertTriangle className=\"w-12 h-12 text-orange-500 mx-auto mb-4\" />\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">Student Not Found</h2>\n          <p className=\"text-gray-600\">The student you're looking for doesn't exist.</p>\n        </div>\n      </div>\n    );\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'Active': return 'bg-green-100 text-green-800';\n      case 'Probation': return 'bg-red-100 text-red-800';\n      case \"Dean's List\": return 'bg-blue-100 text-blue-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getGradeColor = (grade: string) => {\n    if (['A+', 'A', 'A-'].includes(grade)) return 'bg-green-100 text-green-800';\n    if (['B+', 'B', 'B-'].includes(grade)) return 'bg-blue-100 text-blue-800';\n    if (['C+', 'C', 'C-'].includes(grade)) return 'bg-yellow-100 text-yellow-800';\n    if (['D+', 'D'].includes(grade)) return 'bg-orange-100 text-orange-800';\n    if (grade === 'F') return 'bg-red-100 text-red-800';\n    return 'bg-gray-100 text-gray-800';\n  };\n\n  // Group results by intake/semester\n  const groupedResults = (studentResults || []).reduce((acc: any, result: any) => {\n    const semester = result.semester || 'Unknown';\n    if (!acc[semester]) {\n      acc[semester] = [];\n    }\n    acc[semester].push(result);\n    return acc;\n  }, {});\n\n  return (\n    <div className=\"student-profile-container page-container mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      {/* Header Section */}\n      <div className=\"mb-8\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center\">\n              <User className=\"w-8 h-8 text-white\" />\n            </div>\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">\n                {student.firstName} {student.lastName}\n              </h1>\n              <p className=\"text-gray-600 text-lg\">{student.id}</p>\n            </div>\n          </div>\n          <Badge className={getStatusColor(student.status)}>\n            {student.status}\n          </Badge>\n        </div>\n      </div>\n\n      {/* Student Info Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center\">\n              <Mail className=\"w-5 h-5 text-gray-400 mr-3\" />\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Email</p>\n                <p className=\"text-lg font-semibold text-gray-900\">{student.email}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center\">\n              <GraduationCap className=\"w-5 h-5 text-gray-400 mr-3\" />\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Programme</p>\n                <p className=\"text-lg font-semibold text-gray-900\">{student.programme}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center\">\n              <Calendar className=\"w-5 h-5 text-gray-400 mr-3\" />\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Intake</p>\n                <p className=\"text-lg font-semibold text-gray-900\">{student.intake || 'N/A'}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center\">\n              <TrendingUp className=\"w-5 h-5 text-gray-400 mr-3\" />\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Current CGPA</p>\n                <p className=\"text-lg font-semibold text-gray-900\">\n                  {student.currentCGPA ? student.currentCGPA.toFixed(2) : 'N/A'}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Content Tabs */}\n      <Tabs defaultValue=\"academic\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"academic\" className=\"flex items-center space-x-2\">\n            <BookOpen className=\"w-4 h-4\" />\n            <span>Academic Records</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"cgpa\" className=\"flex items-center space-x-2\">\n            <TrendingUp className=\"w-4 h-4\" />\n            <span>CGPA Trends</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"overview\" className=\"flex items-center space-x-2\">\n            <Award className=\"w-4 h-4\" />\n            <span>Overview</span>\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"academic\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Academic Records by Intake Period</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {resultsLoading ? (\n                <div className=\"text-center py-8\">\n                  <div className=\"w-6 h-6 border-2 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n                  <p className=\"text-gray-600\">Loading academic records...</p>\n                </div>\n              ) : Object.keys(groupedResults).length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <BookOpen className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-gray-600\">No academic records found</p>\n                </div>\n              ) : (\n                <div className=\"space-y-6\">\n                  {Object.entries(groupedResults).map(([semester, results]: [string, any]) => (\n                    <div key={semester}>\n                      <h3 className=\"text-lg font-semibold text-gray-900 mb-4 border-b pb-2\">\n                        {semester} Intake\n                      </h3>\n                      <div className=\"grid grid-cols-1 gap-4\">\n                        {(results as any[]).map((result: any, index: number) => (\n                          <div key={index} className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n                            <div className=\"flex-1\">\n                              <h4 className=\"font-medium text-gray-900\">{result.module?.name}</h4>\n                              <p className=\"text-sm text-gray-600\">{result.module?.code}</p>\n                            </div>\n                            <div className=\"flex items-center space-x-4\">\n                              <span className=\"text-sm text-gray-600\">\n                                {result.module?.credits} credits\n                              </span>\n                              <Badge className={getGradeColor(result.grade)}>\n                                {result.grade}\n                              </Badge>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"cgpa\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>CGPA History</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {cgpaLoading ? (\n                <div className=\"text-center py-8\">\n                  <div className=\"w-6 h-6 border-2 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n                  <p className=\"text-gray-600\">Loading CGPA history...</p>\n                </div>\n              ) : !cgpaHistory || cgpaHistory.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <TrendingUp className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-gray-600\">No CGPA history available</p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {cgpaHistory.map((record: any, index: number) => (\n                    <div key={index} className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n                      <div>\n                        <p className=\"font-medium text-gray-900\">\n                          Semester {record.semester} - {record.year}\n                        </p>\n                        <p className=\"text-sm text-gray-600\">\n                          Credits: {record.totalCreditsEarned}\n                        </p>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"text-2xl font-bold text-blue-600\">\n                          {parseFloat(record.cumulativeCGPA).toFixed(2)}\n                        </p>\n                        <p className=\"text-sm text-gray-600\">CGPA</p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Academic Summary</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Programme:</span>\n                    <span className=\"font-medium\">{student.programme}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Intake:</span>\n                    <span className=\"font-medium\">{student.intake || 'N/A'}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Current Status:</span>\n                    <Badge className={getStatusColor(student.status)}>\n                      {student.status}\n                    </Badge>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Credits Earned:</span>\n                    <span className=\"font-medium\">{student.creditsEarned || 0}</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Performance Indicators</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Current CGPA:</span>\n                    <span className=\"text-2xl font-bold text-blue-600\">\n                      {student.currentCGPA ? student.currentCGPA.toFixed(2) : 'N/A'}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Total Subjects:</span>\n                    <span className=\"font-medium\">\n                      {studentResults ? studentResults.length : 0}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Academic Standing:</span>\n                    <Badge className={getStatusColor(student.status)}>\n                      {student.status}\n                    </Badge>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":13476},"scripts/create-modules.js":{"content":"const { drizzle } = require('drizzle-orm/neon-http');\nconst { neon } = require('@neondatabase/serverless');\nconst { modules } = require('../shared/schema.ts');\n\nconst sql = neon(process.env.DATABASE_URL);\nconst db = drizzle(sql);\n\nconst subjectsData = [\n  { code: \"MPU3183N\", name: \"Penghayatan Etika dan Peradaban\", credits: 3, programme: \"UEIS\" },\n  { code: \"KBEN1033N\", name: \"Oral Communication\", credits: 3, programme: \"UEIS\" },\n  { code: \"XBCS1043N\", name: \"Computing Mathematics\", credits: 3, programme: \"UEIS\" },\n  { code: \"XBCS1143N\", name: \"Application Development\", credits: 3, programme: \"UEIS\" },\n  { code: \"XBCS1183N\", name: \"Database Management & Security\", credits: 3, programme: \"UEIS\" },\n  { code: \"MPU3333N\", name: \"Integrity and Anti Corruption\", credits: 3, programme: \"UEIS\" },\n  { code: \"MPU3323N\", name: \"Malaysia and Global Issues\", credits: 3, programme: \"UEIS\" },\n  { code: \"XBCS1123N\", name: \"Statistics\", credits: 3, programme: \"UEIS\" },\n  { code: \"MPU3143N\", name: \"Bahasa Melayu Komunikasi 2\", credits: 3, programme: \"UEIS\" },\n  { code: \"MPU3123N\", name: \"Tamadun Islam & Tamadun Asia\", credits: 3, programme: \"UEIS\" },\n  { code: \"KBRM3014N\", name: \"Research Methodology\", credits: 4, programme: \"UEIS\" },\n  { code: \"MPU3213\", name: \"Bahasa Kebangsaan A\", credits: 3, programme: \"UEIS\" },\n  { code: \"XBCS2103N\", name: \"Fundamentals of Object Oriented Programming\", credits: 3, programme: \"UEIS\" },\n  { code: \"XBCS2013N\", name: \"Principles of Software Engineering\", credits: 3, programme: \"UEIS\" },\n  { code: \"XBCS2193N\", name: \"HCI & User Experience\", credits: 3, programme: \"UEIS\" },\n  { code: \"MPU3193N\", name: \"Philosophy and Current Issues\", credits: 3, programme: \"UEIS\" },\n  { code: \"MPU3113\", name: \"Hubungan Etnik\", credits: 3, programme: \"UEIS\" },\n  { code: \"XBCS1153N\", name: \"System Analysis and Design\", credits: 3, programme: \"UEIS\" },\n  { code: \"XBIS1034N\", name: \"Foundation of Information Systems\", credits: 3, programme: \"UEIS\" },\n  { code: \"XBCS2163N\", name: \"Database Management Systems\", credits: 3, programme: \"UEIS\" },\n  { code: \"XBIS2054N\", name: \"Data Science\", credits: 3, programme: \"UEIS\" },\n  { code: \"XBIS3014N\", name: \"Enterprise Systems\", credits: 4, programme: \"UEIS\" },\n  { code: \"XBIS2034N\", name: \"E-Commerce\", credits: 3, programme: \"UEIS\" },\n  { code: \"XBIS2044N\", name: \"Enterprise Architecture\", credits: 3, programme: \"UEIS\" },\n  { code: \"XBIS3034N\", name: \"Business Process Management\", credits: 3, programme: \"UEIS\" },\n  { code: \"XBIS3024N\", name: \"Information Security\", credits: 3, programme: \"UEIS\" },\n  { code: \"XBIS3044N\", name: \"Digital Business Strategy\", credits: 3, programme: \"UEIS\" },\n  { code: \"XBMC3014N\", name: \"Internet & Web Development\", credits: 4, programme: \"UEIS\" },\n  { code: \"XBCS2074N\", name: \"Computer Networks\", credits: 3, programme: \"UEIS\" },\n  { code: \"XBIN2018N\", name: \"Industrial Training\", credits: 3, programme: \"UEIS\" },\n  { code: \"XBCT3064N\", name: \"Final Year Project A\", credits: 3, programme: \"UEIS\" },\n  { code: \"XBCT3074N\", name: \"Final Year Project B\", credits: 3, programme: \"UEIS\" },\n  { code: \"BBAC2014N\", name: \"Management Accounting\", credits: 3, programme: \"UEIS\" },\n  { code: \"BBAC1014N\", name: \"Financial Accounting\", credits: 3, programme: \"UEIS\" },\n  { code: \"BBMK2024N\", name: \"Marketing\", credits: 3, programme: \"UEIS\" },\n  { code: \"BBMG1013N\", name: \"Principles of Management\", credits: 3, programme: \"UEIS\" },\n  { code: \"BBEC1013N\", name: \"Principles of Economics\", credits: 3, programme: \"UEIS\" },\n  { code: \"BBFN1014N\", name: \"Principles of Finance\", credits: 3, programme: \"UEIS\" },\n  { code: \"BBMG3024N\", name: \"Strategic Management\", credits: 3, programme: \"UEIS\" },\n  { code: \"BBMG2014N\", name: \"Organizational Behaviour\", credits: 3, programme: \"UEIS\" },\n  { code: \"BBLG2034N\", name: \"Supply Chain Management\", credits: 3, programme: \"UEIS\" },\n  { code: \"XBCS2094N\", name: \"GUI Programming\", credits: 3, programme: \"UEIS\" },\n  { code: \"XBCS2064N\", name: \"Integrative Consultancy Project\", credits: 3, programme: \"UEIS\" },\n  { code: \"XBCS2124N\", name: \"Computational Intelligence\", credits: 3, programme: \"UEIS\" },\n  { code: \"XBIN3018N\", name: \"Internship\", credits: 3, programme: \"UEIS\" }\n];\n\nasync function createModules() {\n  try {\n    console.log('Creating modules from CSV data...');\n    \n    for (const subject of subjectsData) {\n      try {\n        await db.insert(modules).values({\n          code: subject.code,\n          name: subject.name,\n          credits: subject.credits,\n          programme: subject.programme,\n          description: `${subject.name} - ${subject.programme} Programme`\n        }).onConflictDoNothing();\n        \n        console.log(`✓ Created module: ${subject.code} - ${subject.name}`);\n      } catch (error) {\n        console.log(`⚠ Module ${subject.code} may already exist: ${error.message}`);\n      }\n    }\n    \n    console.log(`\\n✅ Successfully processed ${subjectsData.length} modules`);\n    process.exit(0);\n    \n  } catch (error) {\n    console.error('Error creating modules:', error);\n    process.exit(1);\n  }\n}\n\ncreateModules();","size_bytes":5109}}}